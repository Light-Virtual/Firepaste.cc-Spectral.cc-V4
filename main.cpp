#include <thread>
#include <ShlObj.h>
#include <ShlObj_core.h>
#include "includes.hpp"
#include "utils\ctx\ctx.hpp"
#include "utils\recv\recv.h"
#include "utils\imports\imports.h"
#include "utils\nSkinz\SkinChanger.h"
#pragma comment(lib, "Winmm.lib")

PVOID base_address = nullptr;

__forceinline void setup_netvars();
__forceinline void setup_skins();
__forceinline void setup_hooks();
__forceinline void crash(bool debug = false);
__forceinline void setup_render();

char loligiggle[] =
{
	0x49, 0x44, 0x33, 0x04, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02,
	0x54, 0x58, 0x58, 0x58, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00,
	0x03, 0x6D, 0x61, 0x6A, 0x6F, 0x72, 0x5F, 0x62, 0x72, 0x61,
	0x6E, 0x64, 0x00, 0x4D, 0x34, 0x41, 0x20, 0x00, 0x54, 0x58,
	0x58, 0x58, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x03, 0x6D,
	0x69, 0x6E, 0x6F, 0x72, 0x5F, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6F, 0x6E, 0x00, 0x35, 0x31, 0x32, 0x00, 0x54, 0x58, 0x58,
	0x58, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x03, 0x63, 0x6F,
	0x6D, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6C, 0x65, 0x5F, 0x62,
	0x72, 0x61, 0x6E, 0x64, 0x73, 0x00, 0x69, 0x73, 0x6F, 0x6D,
	0x69, 0x73, 0x6F, 0x32, 0x00, 0x54, 0x53, 0x53, 0x45, 0x00,
	0x00, 0x00, 0x0F, 0x00, 0x00, 0x03, 0x4C, 0x61, 0x76, 0x66,
	0x35, 0x38, 0x2E, 0x34, 0x35, 0x2E, 0x31, 0x30, 0x30, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0xFF, 0xFB, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x6E, 0x66, 0x6F,
	0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00,
	0x25, 0x8C, 0x00, 0x16, 0x16, 0x16, 0x16, 0x21, 0x21, 0x21,
	0x21, 0x21, 0x2C, 0x2C, 0x2C, 0x2C, 0x37, 0x37, 0x37, 0x37,
	0x37, 0x42, 0x42, 0x42, 0x42, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D,
	0x59, 0x59, 0x59, 0x59, 0x64, 0x64, 0x64, 0x64, 0x64, 0x6F,
	0x6F, 0x6F, 0x6F, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x85, 0x85,
	0x85, 0x85, 0x90, 0x90, 0x90, 0x90, 0x90, 0x9B, 0x9B, 0x9B,
	0x9B, 0x9B, 0xA6, 0xA6, 0xA6, 0xA6, 0xB2, 0xB2, 0xB2, 0xB2,
	0xB2, 0xBD, 0xBD, 0xBD, 0xBD, 0xC8, 0xC8, 0xC8, 0xC8, 0xC8,
	0xD3, 0xD3, 0xD3, 0xD3, 0xDE, 0xDE, 0xDE, 0xDE, 0xDE, 0xE9,
	0xE9, 0xE9, 0xE9, 0xF4, 0xF4, 0xF4, 0xF4, 0xF4, 0xFF, 0xFF,
	0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x4C, 0x61, 0x76, 0x63,
	0x35, 0x38, 0x2E, 0x39, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x03, 0x5E,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x25, 0x8C, 0x1C, 0xDC,
	0x27, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFB, 0x90,
	0x64, 0x00, 0x0C, 0xF0, 0x00, 0x00, 0x69, 0x00, 0x00, 0x00,
	0x08, 0x00, 0x00, 0x0D, 0x20, 0x00, 0x00, 0x01, 0x0B, 0x41,
	0x90, 0x80, 0x54, 0x02, 0x80, 0x00, 0x00, 0x00, 0x34, 0x82,
	0x80, 0x00, 0x04, 0x00, 0x4F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0x9F, 0x90, 0x84, 0x65, 0x21, 0x27, 0x3F, 0xFF, 0xFF,
	0xCE, 0x45, 0x13, 0x0F, 0x9D, 0x04, 0x03, 0x8C, 0x8D, 0xD0,
	0x8C, 0xA1, 0xC2, 0x28, 0x98, 0xBB, 0xA1, 0x1A, 0xA7, 0x74,
	0x20, 0x70, 0x92, 0x10, 0x8C, 0xA1, 0xF0, 0x1C, 0x5C, 0x60,
	0x06, 0x2E, 0x30, 0x04, 0x02, 0x30, 0x98, 0x7C, 0xEA, 0x73,
	0x9E, 0x20, 0x1C, 0x0E, 0x14, 0x38, 0x28, 0xC7, 0x39, 0xF5,
	0x23, 0x29, 0xCF, 0x21, 0x28, 0x42, 0x32, 0x87, 0xC3, 0xE2,
	0xE8, 0x1F, 0x0F, 0x9D, 0x08, 0x1C, 0x0E, 0x0A, 0x28, 0x81,
	0x0B, 0x87, 0xEA, 0x30, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x01, 0x00, 0x40, 0x30, 0x3A, 0x00, 0x80, 0x07, 0x20, 0x89,
	0xF6, 0xB0, 0x56, 0x6F, 0x1C, 0xA1, 0xF3, 0xDD, 0x05, 0xAC,
	0x5B, 0x4B, 0x7E, 0x9C, 0xC0, 0xD0, 0x36, 0xC1, 0x4A, 0x09,
	0xFC, 0xDF, 0xE6, 0xEB, 0x76, 0x33, 0x0B, 0x38, 0x2D, 0x85,
	0xC1, 0x91, 0x1D, 0x5F, 0x9B, 0x90, 0x73, 0x22, 0x71, 0x14,
	0xC1, 0xB6, 0x84, 0x98, 0xB7, 0x0E, 0x68, 0x7C, 0x63, 0x39,
	0xFD, 0xD8, 0xCC, 0xAE, 0x91, 0x71, 0x89, 0x01, 0x4C, 0x06,
	0xD8, 0x05, 0xA2, 0x05, 0xFA, 0x0C, 0xB2, 0x18, 0x2E, 0xEC,
	0xDB, 0x65, 0xF2, 0x81, 0xE2, 0x41, 0xD8, 0x8A, 0x14, 0x47,
	0x18, 0x88, 0x81, 0x82, 0xC2, 0x20, 0x61, 0x70, 0x28, 0x18,
	0xC8, 0x1E, 0x06, 0x55, 0x2D, 0x81, 0x8F, 0x41, 0xE0, 0x18,
	0x1D, 0x03, 0x29, 0x9B, 0x41, 0x12, 0x0F, 0xEE, 0xFE, 0x27,
	0x32, 0x28, 0x78, 0xF9, 0xA2, 0x04, 0xE2, 0x6A, 0x22, 0xE6,
	0xC0, 0x69, 0xF1, 0x78, 0x18, 0x18, 0x3C, 0x03, 0x01, 0x81,
	0xAC, 0x70, 0x4F, 0xA0, 0x61, 0xB0, 0xD8, 0x5E, 0xA1, 0x04,
	0x04, 0x17, 0x11, 0x2F, 0xFF, 0xB4, 0xD0, 0xC8, 0x9C, 0x59,
	0xE2, 0xF9, 0xB9, 0x13, 0x28, 0x13, 0x84, 0x10, 0xC4, 0x83,
	0x99, 0x99, 0x8D, 0xE0, 0x1C, 0x04, 0x0B, 0x3A, 0x3B, 0xC3,
	0x89, 0x13, 0xB0, 0x7C, 0x01, 0xDB, 0x0C, 0x5C, 0x1D, 0x28,
	0x05, 0x01, 0xC2, 0xFF, 0x85, 0xFC, 0x03, 0x17, 0x85, 0xC3,
	0xE2, 0xFF, 0xFF, 0xFF, 0xF3, 0x77, 0xFF, 0xFF, 0xFF, 0xC4,
	0xA0, 0x4B, 0x8B, 0x52, 0x81, 0x40, 0x63, 0xC5, 0x02, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x25, 0x9C, 0x8A, 0x59, 0x33, 0x03,
	0xCE, 0x0C, 0x3F, 0x87, 0x1A, 0x0C, 0x3A, 0x2C, 0xDC, 0x0C,
	0x7F, 0x7F, 0x49, 0x9B, 0x37, 0x62, 0x79, 0xF7, 0x3C, 0x8D,
	0x82, 0x90, 0xA3, 0xF9, 0xF6, 0x6E, 0xE5, 0x46, 0x72, 0x2C,
	0x34, 0x06, 0xAC, 0x67, 0xCD, 0xC6, 0x65, 0xF8, 0x55, 0x34,
	0x0A, 0x12, 0x11, 0xCB, 0xDE, 0xFB, 0xBC, 0xFB, 0x5A, 0x99,
	0x69, 0xC4, 0x19, 0xC2, 0xFF, 0xFB, 0x92, 0x64, 0x91, 0x80,
	0x06, 0xE0, 0x83, 0x3B, 0x56, 0x16, 0xA0, 0x02, 0x00, 0x00,
	0x0D, 0x20, 0xC0, 0x00, 0x00, 0x1A, 0xC1, 0x59, 0x1D, 0x59,
	0xAC, 0x80, 0x00, 0x7D, 0x1D, 0x9C, 0x83, 0x01, 0x00, 0x01,
	0xEC, 0x81, 0x21, 0xC6, 0x47, 0xFB, 0xA7, 0xCE, 0xDF, 0xFE,
	0x53, 0x92, 0xAA, 0x3A, 0xEB, 0x5C, 0xC1, 0x1C, 0x79, 0x32,
	0xF8, 0x20, 0x0D, 0xB7, 0xED, 0x25, 0x98, 0x7C, 0x0C, 0x5B,
	0xCC, 0xE2, 0x5B, 0xED, 0xC0, 0xA3, 0x80, 0x82, 0x87, 0xAA,
	0x00, 0x87, 0x51, 0x1E, 0xC0, 0x29, 0x9D, 0xAB, 0x98, 0x72,
	0x01, 0xA4, 0x39, 0x99, 0xA2, 0x69, 0x6D, 0x3D, 0x79, 0xCA,
	0x21, 0x4C, 0x9D, 0x4D, 0x1B, 0xA2, 0x7F, 0xB4, 0xD5, 0x2C,
	0x56, 0xE5, 0xA8, 0xD7, 0x99, 0x54, 0x3A, 0xAF, 0xD8, 0x99,
	0x8C, 0x90, 0xD1, 0x2F, 0xA9, 0x75, 0x61, 0x90, 0x81, 0xD2,
	0x55, 0x25, 0xDA, 0xD4, 0x72, 0x42, 0xE7, 0xCC, 0xBC, 0xFF,
	0x2A, 0xBD, 0x8D, 0xF4, 0xBE, 0x56, 0x15, 0xF0, 0xD6, 0xD9,
	0x44, 0xF5, 0x5C, 0x28, 0x65, 0x19, 0xA2, 0xD2, 0xC7, 0xB4,
	0x8A, 0xE9, 0x26, 0xE7, 0xC2, 0xFE, 0xEE, 0x1D, 0xFD, 0xF3,
	0xB9, 0x77, 0xF5, 0xDE, 0x63, 0x5B, 0xA5, 0xAE, 0xF7, 0x19,
	0x7E, 0xA1, 0xA9, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xAF, 0xFF,
	0xD3, 0x45, 0x23, 0x41, 0xD8, 0x5F, 0xFF, 0xFC, 0xDC, 0x51,
	0x85, 0x92, 0x16, 0xCC, 0x2C, 0xD8, 0xCA, 0x19, 0xFF, 0xFF,
	0xE4, 0x40, 0x30, 0xC5, 0x15, 0x71, 0xBB, 0xB4, 0x91, 0xC9,
	0x64, 0x05, 0x4C, 0x76, 0x84, 0x81, 0x01, 0xAC, 0x1A, 0xC2,
	0xD2, 0x23, 0xD2, 0x6F, 0x2C, 0x21, 0x80, 0x58, 0x0D, 0x14,
	0x60, 0x51, 0x95, 0x9C, 0x25, 0x00, 0x22, 0x50, 0x76, 0xC9,
	0x1A, 0xA2, 0x29, 0xB2, 0x14, 0x04, 0xE4, 0xC4, 0xC4, 0x0E,
	0x06, 0x52, 0xA9, 0x60, 0x73, 0x25, 0x70, 0x61, 0x0D, 0x04,
	0xDB, 0x8C, 0xC7, 0x25, 0x6B, 0x26, 0x29, 0xB2, 0x4A, 0x12,
	0x07, 0x89, 0x2E, 0x50, 0x42, 0x29, 0x1A, 0xBB, 0x92, 0x18,
	0x2C, 0x5A, 0x0F, 0xBA, 0x2F, 0x41, 0x8C, 0x60, 0x72, 0x10,
	0x08, 0xE9, 0xA6, 0x59, 0xE0, 0x64, 0xC5, 0xAF, 0x34, 0xCF,
	0x32, 0x61, 0x0B, 0x7E, 0x79, 0x8C, 0x04, 0x40, 0x1D, 0xA1,
	0x96, 0xB1, 0x90, 0x28, 0x89, 0xB1, 0x69, 0x87, 0x00, 0x2E,
	0x70, 0x1B, 0x01, 0x12, 0x44, 0xDC, 0x93, 0x22, 0x0D, 0x19,
	0x40, 0x05, 0x6E, 0x37, 0x01, 0x34, 0x57, 0x31, 0x63, 0x3B,
	0x87, 0x01, 0x0E, 0x40, 0x10, 0xC1, 0xC0, 0x66, 0x0C, 0x12,
	0x5A, 0x58, 0x32, 0x01, 0xE4, 0x65, 0x12, 0xCB, 0xB7, 0xE6,
	0xF9, 0x3F, 0x5E, 0xB5, 0x3E, 0xB0, 0x9E, 0xB3, 0x2D, 0xC6,
	0xBC, 0x0F, 0x3F, 0xBA, 0xF9, 0x76, 0xAD, 0xDC, 0xF7, 0x2F,
	0xCA, 0xB7, 0xEE, 0x72, 0x9A, 0xA6, 0xBB, 0x84, 0xCD, 0x34,
	0xC4, 0xB2, 0x1C, 0xA7, 0xCD, 0x9C, 0x3B, 0x14, 0xB7, 0xE5,
	0x95, 0xE5, 0x51, 0x58, 0xE4, 0xF5, 0xD9, 0x98, 0xE4, 0x62,
	0xE6, 0x71, 0xFF, 0xFB, 0x92, 0x64, 0x67, 0x80, 0xC7, 0x27,
	0x4F, 0x52, 0xEF, 0x6B, 0x20, 0x04, 0x1E, 0x65, 0x49, 0x91,
	0xE0, 0x34, 0x00, 0x97, 0x0D, 0x3D, 0x44, 0x8C, 0xE1, 0x91,
	0xC0, 0xAC, 0x96, 0xE7, 0x8C, 0x05, 0x63, 0x0B, 0xB9, 0x7C,
	0x52, 0xD5, 0xFB, 0x71, 0x88, 0x72, 0x31, 0x10, 0xAB, 0x76,
	0x82, 0x33, 0x17, 0xA0, 0x77, 0xFF, 0xF5, 0xB8, 0x1A, 0xDA,
	0x04, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x75, 0x22, 0x7C,
	0x1D, 0x00, 0xEC, 0x13, 0xF1, 0xC8, 0x3D, 0x18, 0xC1, 0x33,
	0x0A, 0xD2, 0x52, 0x8F, 0x30, 0x99, 0x31, 0x85, 0x4F, 0xE3,
	0x9D, 0xD4, 0x00, 0x00, 0x04, 0x62, 0x21, 0x60, 0xB1, 0x0C,
	0xAE, 0x18, 0x52, 0xA9, 0x5A, 0xAE, 0x9E, 0x6D, 0x27, 0x22,
	0xED, 0x2D, 0xC3, 0x55, 0x73, 0x00, 0x85, 0x92, 0x64, 0x82,
	0xB5, 0x16, 0x23, 0xD8, 0x94, 0x09, 0xCE, 0x2C, 0xF3, 0x63,
	0x8B, 0xE2, 0x5C, 0x70, 0xE2, 0x01, 0x88, 0xCB, 0x15, 0xA1,
	0xF7, 0x6D, 0xE7, 0xA5, 0x6A, 0x06, 0x8A, 0x8E, 0xDB, 0xE8,
	0xB9, 0x2C, 0x5B, 0x5C, 0x88, 0xA0, 0xD4, 0x1A, 0xFC, 0x3A,
	0xF2, 0x47, 0x63, 0x0F, 0xC3, 0x75, 0x2F, 0x9A, 0x9B, 0xA0,
	0x1D, 0xAF, 0x12, 0x98, 0x7A, 0x2B, 0xDD, 0xF6, 0x71, 0x12,
	0xA1, 0x26, 0x5F, 0xA6, 0x54, 0x24, 0x86, 0x22, 0xE3, 0xBF,
	0x6E, 0x44, 0x55, 0xDD, 0x7D, 0x13, 0x22, 0x05, 0xA4, 0x8C,
	0xCA, 0x69, 0xA6, 0x22, 0x6C, 0x29, 0x39, 0x51, 0x50, 0xBA,
	0xE9, 0xE5, 0x51, 0xDC, 0x88, 0x2F, 0x87, 0xFD, 0x4B, 0xE8,
	0xE0, 0xF8, 0x2D, 0xF7, 0x64, 0x71, 0xF6, 0xDF, 0x1A, 0xCF,
	0x8A, 0x4E, 0x31, 0xFD, 0x36, 0x62, 0xAE, 0x24, 0x32, 0x4E,
	0x7C, 0xB1, 0x7A, 0x6A, 0xAB, 0x5F, 0xC3, 0xDC, 0x68, 0x03,
	0x70, 0x8D, 0x94, 0x24, 0x86, 0x8E, 0x79, 0x83, 0xE6, 0x12,
	0x9D, 0xFA, 0x9F, 0xBF, 0x9A, 0xF3, 0x48, 0x51, 0xB7, 0x02,
	0x85, 0x9D, 0x89, 0x5E, 0xB8, 0x10, 0x00, 0x00, 0x1F, 0xBF,
	0xFA, 0xDB, 0x30, 0x18, 0x2D, 0x83, 0x15, 0x4E, 0x21, 0xD2,
	0xB2, 0x06, 0x0E, 0xC2, 0x17, 0xA2, 0xD3, 0x40, 0x3A, 0xCF,
	0x65, 0x11, 0x57, 0x2D, 0xF8, 0xC6, 0xDD, 0x4D, 0x58, 0xBB,
	0x4F, 0x4F, 0x2C, 0x00, 0x91, 0x6B, 0x44, 0xAD, 0x48, 0x10,
	0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x79, 0x34, 0xE0,
	0x0D, 0x70, 0xC4, 0x25, 0x53, 0xAD, 0x94, 0xDE, 0x14, 0x16,
	0x89, 0x6D, 0xCD, 0x8B, 0xE5, 0x2D, 0x6A, 0x03, 0x04, 0xC2,
	0x47, 0x1C, 0x63, 0x60, 0xD0, 0x04, 0xC4, 0x11, 0x04, 0x98,
	0xB9, 0x8E, 0x3C, 0x07, 0x2A, 0x60, 0x34, 0x08, 0x92, 0x85,
	0x87, 0x92, 0x96, 0x87, 0x5C, 0x14, 0x2A, 0x47, 0xC2, 0xF4,
	0x2D, 0x24, 0xB4, 0x86, 0x64, 0x2C, 0x9D, 0x80, 0x38, 0x4C,
	0xB1, 0x42, 0x5D, 0xD8, 0x09, 0xDE, 0x5E, 0xE2, 0x40, 0x15,
	0xA5, 0x3F, 0x18, 0xB4, 0x0C, 0xAB, 0x1A, 0xEC, 0xB9, 0x3E,
	0xCC, 0xE0, 0x60, 0x42, 0x00, 0x71, 0x82, 0xD4, 0xB6, 0xB3,
	0xFF, 0xFB, 0x92, 0x64, 0x33, 0x03, 0xD6, 0xF5, 0x4E, 0xD2,
	0x73, 0x58, 0x7F, 0x12, 0x29, 0xA6, 0x8A, 0xD3, 0x00, 0x29,
	0xC0, 0x90, 0xF1, 0x3B, 0x61, 0xCC, 0x3D, 0x13, 0x80, 0xBD,
	0x9A, 0x2A, 0x88, 0x01, 0x3F, 0x08, 0x4B, 0x61, 0xA2, 0x17,
	0x10, 0x42, 0x01, 0x49, 0x85, 0x43, 0xBC, 0x23, 0x02, 0x11,
	0x98, 0xC0, 0x00, 0x18, 0x13, 0x54, 0xCA, 0x50, 0xE1, 0xA5,
	0xEC, 0x82, 0x4A, 0xFD, 0x37, 0x49, 0x7B, 0x86, 0xF3, 0x92,
	0x81, 0x01, 0x45, 0x9D, 0x01, 0xAE, 0xD0, 0x88, 0x45, 0xC8,
	0x08, 0x23, 0xAE, 0xD3, 0x5B, 0x18, 0x90, 0xD3, 0x9D, 0x61,
	0xC5, 0x00, 0xE6, 0x05, 0xF8, 0xF1, 0x0C, 0x81, 0x72, 0x29,
	0xE2, 0x3E, 0x7A, 0xDD, 0x47, 0x91, 0x7C, 0xE7, 0x98, 0xB7,
	0xB2, 0x9D, 0x4C, 0x0E, 0x6B, 0xCA, 0x12, 0x56, 0x37, 0x94,
	0xA5, 0xE1, 0x80, 0xEF, 0xF2, 0x1C, 0xA7, 0x59, 0xC6, 0xB9,
	0x53, 0xC4, 0x73, 0x75, 0x0E, 0x0B, 0x1A, 0xDB, 0x93, 0x7B,
	0xA3, 0x80, 0xF3, 0xDA, 0xED, 0xEC, 0x15, 0x5B, 0x12, 0x90,
	0xE8, 0x1C, 0x62, 0x6E, 0xB6, 0xC0, 0xB8, 0x1D, 0x80, 0x00,
	0x1F, 0xE9, 0x7A, 0x47, 0x39, 0xC3, 0xDD, 0x2B, 0x69, 0x22,
	0x0A, 0x8D, 0x00, 0x41, 0x64, 0x83, 0x66, 0x07, 0x08, 0x12,
	0x58, 0xCA, 0x04, 0x04, 0x90, 0xF8, 0x90, 0x20, 0x62, 0xF1,
	0x01, 0x24, 0x33, 0xFB, 0xDE, 0x50, 0x50, 0x83, 0x16, 0x20,
	0x0D, 0x4C, 0x00, 0x00, 0x9C, 0x2E, 0x8A, 0xBD, 0xAE, 0xBB,
	0xD7, 0x9D, 0x33, 0x60, 0x90, 0xB7, 0x36, 0x5C, 0xFC, 0x4C,
	0x33, 0x87, 0x48, 0x2C, 0xC8, 0xC4, 0x09, 0x73, 0x18, 0xEB,
	0xD0, 0xF7, 0x9C, 0xD8, 0x9E, 0x2C, 0xA1, 0x57, 0xDF, 0xB5,
	0xA9, 0x16, 0x64, 0xBF, 0x95, 0xE5, 0x26, 0x5B, 0xD2, 0xC5,
	0x28, 0xCF, 0x1D, 0x20, 0x99, 0xA3, 0x64, 0x1C, 0x3E, 0xB1,
	0x94, 0x2B, 0x0A, 0x05, 0xA6, 0x88, 0xB7, 0x8A, 0x5E, 0xDC,
	0x91, 0x0E, 0xAE, 0xD6, 0xCD, 0x10, 0x5C, 0xCF, 0x99, 0x6A,
	0xEF, 0xBC, 0xBC, 0xEC, 0x13, 0x3F, 0xA4, 0x66, 0x89, 0x62,
	0x44, 0xB2, 0xEF, 0x2F, 0xB0, 0xCC, 0xAC, 0x57, 0x3E, 0x67,
	0x05, 0x42, 0x42, 0xBF, 0xF9, 0xE1, 0xEE, 0x4B, 0x24, 0x32,
	0x3E, 0x2A, 0x18, 0xB1, 0x14, 0x04, 0x5E, 0xD6, 0x91, 0x0B,
	0x8D, 0x2A, 0x1E, 0x75, 0x96, 0xEE, 0xA8, 0x6A, 0x5B, 0xFD,
	0x38, 0xA8, 0xF2, 0xD4, 0x30, 0xFF, 0xA3, 0x56, 0x42, 0x56,
	0xE7, 0x0F, 0x0E, 0x19, 0x6D, 0x2E, 0x2E, 0x39, 0xB1, 0xBB,
	0x32, 0x98, 0xCA, 0x61, 0x42, 0x9A, 0x61, 0x8F, 0x53, 0x68,
	0xFB, 0x3E, 0x8C, 0xB4, 0x8A, 0x12, 0xCA, 0x70, 0x10, 0x07,
	0xDC, 0xC6, 0x2F, 0x05, 0xFE, 0x32, 0x9B, 0x69, 0xFD, 0xAE,
	0xE3, 0xAA, 0x35, 0x80, 0xD0, 0x40, 0x28, 0x44, 0x46, 0x50,
	0xD6, 0x2C, 0x38, 0x96, 0xDD, 0xA2, 0xEF, 0xB4, 0x07, 0x26,
	0x33, 0x9C, 0x42, 0x80, 0x1A, 0x40, 0xF0, 0xE6, 0x50, 0xC9,
	0x15, 0xA8, 0x76, 0x40, 0x9E, 0xA6, 0x02, 0x26, 0xFF, 0xFB,
	0x92, 0x64, 0x12, 0x02, 0xD4, 0x8B, 0x4D, 0xD7, 0xA3, 0x2F,
	0x44, 0xE2, 0x31, 0x86, 0x8A, 0xA3, 0x00, 0x2F, 0xC0, 0x11,
	0x91, 0x01, 0x5F, 0x8C, 0xBC, 0xD5, 0x48, 0xC2, 0x9A, 0x29,
	0x00, 0x00, 0xBF, 0x00, 0xD1, 0x20, 0xB0, 0xCF, 0xB6, 0xE4,
	0xC4, 0x24, 0x73, 0x33, 0x78, 0xC8, 0x37, 0x1C, 0x60, 0x2B,
	0x9B, 0x67, 0x6B, 0x7D, 0x01, 0x92, 0x3E, 0x61, 0xB8, 0x26,
	0x97, 0xD4, 0x8D, 0xF2, 0x30, 0x0F, 0x90, 0x07, 0xA0, 0xAD,
	0x24, 0x41, 0xAE, 0x3B, 0x80, 0xF8, 0x80, 0x1F, 0x21, 0x15,
	0x1D, 0xEA, 0xA0, 0x99, 0x9B, 0x93, 0x21, 0xCC, 0x8B, 0xEC,
	0x4A, 0x25, 0x73, 0xBC, 0x32, 0x45, 0x6C, 0xDB, 0x9B, 0x7B,
	0x79, 0xDC, 0x78, 0xAB, 0xE0, 0xBF, 0xB3, 0x84, 0x18, 0x32,
	0x30, 0x59, 0xF1, 0x2A, 0x32, 0x3B, 0x7E, 0x91, 0x9B, 0x97,
	0xE4, 0x90, 0x8E, 0x21, 0xB1, 0x81, 0xD0, 0xB0, 0x99, 0x35,
	0xE9, 0x68, 0x3B, 0x78, 0xB5, 0x8E, 0x26, 0x5F, 0xFD, 0xB9,
	0x4E, 0x58, 0xE4, 0xA0, 0x50, 0x00, 0x00, 0x7F, 0x29, 0xED,
	0x8D, 0x36, 0xB6, 0xFA, 0x1D, 0x59, 0xDC, 0xED, 0x06, 0x77,
	0x7B, 0xFF, 0xE6, 0xB0, 0xB7, 0xE2, 0x62, 0x57, 0xBB, 0x88,
	0x4D, 0x95, 0xC6, 0x5B, 0xD3, 0xC9, 0xB1, 0x78, 0xD9, 0x70,
	0x3B, 0x9D, 0x3F, 0x8A, 0x5D, 0xC8, 0x31, 0x76, 0x80, 0x86,
	0xAF, 0xAB, 0x70, 0x7C, 0x61, 0x30, 0x00, 0x03, 0x11, 0x16,
	0x75, 0xD0, 0x53, 0x28, 0x11, 0xBB, 0xBF, 0x6F, 0xE9, 0x03,
	0xA0, 0x37, 0x1A, 0x0D, 0x85, 0xFB, 0x27, 0xAF, 0x12, 0x4E,
	0x53, 0xB9, 0xF4, 0x37, 0x56, 0xBA, 0x39, 0xAC, 0x99, 0x5A,
	0x15, 0x98, 0x49, 0x85, 0x0C, 0x46, 0xA7, 0x52, 0x37, 0x66,
	0x8D, 0xB2, 0xBB, 0x40, 0x47, 0x57, 0x32, 0x5D, 0xEE, 0x59,
	0x94, 0xAD, 0x4D, 0x31, 0x5B, 0x4F, 0x95, 0x6B, 0x20, 0xDE,
	0x51, 0xD1, 0xCC, 0xB8, 0xCD, 0x83, 0xD0, 0xEC, 0x13, 0x92,
	0x48, 0x69, 0xAC, 0xB9, 0x3E, 0x6C, 0x6A, 0x33, 0x49, 0x2B,
	0xC7, 0x17, 0x16, 0x08, 0x4C, 0x92, 0x31, 0x31, 0xB8, 0xBE,
	0x50, 0x39, 0xD5, 0x0C, 0x7C, 0x7E, 0xAB, 0x27, 0x80, 0xF6,
	0xD7, 0x93, 0x32, 0xC5, 0x7C, 0x6E, 0x9F, 0x9E, 0x63, 0x18,
	0x90, 0x7F, 0x0D, 0x8D, 0x89, 0x1D, 0x19, 0xFB, 0x42, 0x00,
	0xC0, 0xE6, 0xDA, 0x2A, 0xB1, 0x68, 0xDE, 0x41, 0xA5, 0x17,
	0x06, 0x8A, 0xEC, 0xBF, 0xF3, 0x5D, 0x90, 0xA2, 0x78, 0x29,
	0x48, 0x62, 0x2D, 0x3A, 0xAC, 0x23, 0x29, 0x44, 0xF9, 0x7D,
	0x7D, 0xFF, 0xFF, 0x31, 0x37, 0xF1, 0xBD, 0x7C, 0x1E, 0xC7,
	0x14, 0x34, 0xE9, 0x35, 0x44, 0xA7, 0xCB, 0xAA, 0x7D, 0x95,
	0x0E, 0x5E, 0x43, 0x87, 0x14, 0xCD, 0xA8, 0x1B, 0xAB, 0x9B,
	0x27, 0x70, 0x02, 0x10, 0x40, 0x00, 0x00, 0x00, 0x00, 0x40,
	0xB7, 0x7E, 0x54, 0xEB, 0x46, 0xD5, 0x5D, 0xDD, 0x97, 0x10,
	0x0C, 0x9C, 0x6B, 0x98, 0x61, 0x9F, 0x47, 0xC2, 0x9A, 0xDC,
	0x3A, 0x97, 0x86, 0x96, 0x02, 0xA2, 0xFF, 0xFB, 0x92, 0x64,
	0x11, 0x06, 0xC4, 0xB7, 0x4C, 0x55, 0xEB, 0x78, 0x62, 0x72,
	0x2E, 0x26, 0x8A, 0x73, 0x01, 0xA6, 0xC4, 0x90, 0x85, 0x2F,
	0x55, 0x2D, 0xE1, 0x29, 0x48, 0xC2, 0x99, 0xE9, 0x84, 0x00,
	0xB3, 0x02, 0x95, 0xD0, 0xE3, 0xE0, 0xE3, 0x29, 0x43, 0x0D,
	0x54, 0x45, 0xE4, 0x0A, 0x0D, 0x9B, 0xC1, 0x6C, 0xBE, 0xC6,
	0xAA, 0x52, 0xBE, 0xD0, 0xCB, 0x54, 0xA4, 0xA6, 0x83, 0x2E,
	0x48, 0xED, 0xCE, 0x1A, 0x0D, 0x40, 0x54, 0xA4, 0x4A, 0x3B,
	0x2D, 0x0F, 0x43, 0x58, 0x16, 0x14, 0x0B, 0x9D, 0x70, 0x94,
	0x23, 0x28, 0x14, 0x97, 0xA3, 0x60, 0xA4, 0x54, 0x4C, 0x66,
	0x7C, 0x9A, 0xEA, 0xCE, 0x44, 0x37, 0xCC, 0x49, 0x66, 0x34,
	0x13, 0xCC, 0x62, 0x5A, 0x99, 0x52, 0x1A, 0x9B, 0x43, 0x0D,
	0x18, 0xFB, 0x95, 0x5D, 0x8F, 0xFB, 0xBA, 0x99, 0x7D, 0xAA,
	0x89, 0x6D, 0x7F, 0x63, 0xD7, 0xD2, 0x53, 0x77, 0xF9, 0xBB,
	0x4C, 0xA7, 0x32, 0x8B, 0x1C, 0x99, 0x9F, 0x65, 0xA3, 0xBA,
	0xF6, 0xCF, 0x74, 0xC7, 0xAC, 0x7C, 0xD3, 0x99, 0x10, 0x01,
	0x00, 0x01, 0x07, 0xF5, 0xDC, 0xB8, 0x13, 0xF0, 0x6D, 0x8E,
	0x41, 0x2C, 0x25, 0x09, 0xE3, 0x68, 0x99, 0x94, 0x47, 0x00,
	0xE3, 0x7F, 0xFF, 0xB0, 0x3E, 0x1C, 0x70, 0x59, 0x22, 0x04,
	0x40, 0xE0, 0x69, 0x61, 0xCE, 0x0C, 0x99, 0x0D, 0x48, 0x98,
	0x74, 0xFF, 0xFF, 0xFF, 0xEB, 0x9D, 0x20, 0x31, 0xED, 0x85,
	0xC6, 0x1C, 0xE4, 0xC2, 0x6D, 0x9B, 0x83, 0x7C, 0x60, 0x41,
	0xC6, 0x71, 0x1C, 0xEE, 0xAD, 0x46, 0x03, 0x61, 0xD3, 0xCD,
	0xF3, 0x42, 0x31, 0xD1, 0x22, 0xC3, 0xC3, 0x05, 0x50, 0x5D,
	0x0B, 0x25, 0x4C, 0xD7, 0x8C, 0x36, 0xA0, 0x14, 0xEA, 0x7C,
	0xE8, 0xA8, 0xC0, 0x64, 0x32, 0x27, 0x27, 0x30, 0x8E, 0xA7,
	0x14, 0x04, 0xEB, 0x80, 0x60, 0xD0, 0x4C, 0x94, 0x34, 0x19,
	0x48, 0x3E, 0x61, 0x74, 0x70, 0x78, 0xAA, 0x2C, 0x25, 0x02,
	0xE9, 0x22, 0x80, 0xA0, 0x94, 0x2C, 0x0D, 0x9D, 0xD5, 0xC0,
	0xC9, 0xF4, 0x9D, 0xA9, 0x4B, 0xCE, 0x09, 0xDC, 0x26, 0xCB,
	0xA3, 0xAF, 0x52, 0xAD, 0x1A, 0xFE, 0x5F, 0x5C, 0xCC, 0x7E,
	0x1F, 0x92, 0x66, 0x2D, 0x48, 0x29, 0x85, 0xDA, 0xAB, 0xF8,
	0x30, 0xA6, 0x51, 0x3E, 0x31, 0xEF, 0xCB, 0x60, 0xED, 0xF3,
	0xCD, 0x9F, 0xF7, 0x91, 0xFA, 0xB1, 0x2E, 0x00, 0x5F, 0x9F,
	0x0D, 0x04, 0x52, 0x79, 0x78, 0x5C, 0x10, 0x89, 0xF4, 0x7C,
	0x7F, 0x32, 0x08, 0x1F, 0xDB, 0x51, 0xC7, 0x21, 0xB4, 0xE2,
	0xC6, 0x22, 0xA4, 0x67, 0x83, 0xF9, 0xF1, 0xD3, 0x95, 0x1A,
	0x99, 0xBA, 0x63, 0xED, 0x45, 0x0A, 0x28, 0x10, 0x54, 0xC4,
	0x62, 0x77, 0xFF, 0xFF, 0xFF, 0xA2, 0x10, 0x90, 0x10, 0x00,
	0x00, 0x00, 0x43, 0x4F, 0x9C, 0x64, 0x9B, 0x9B, 0x61, 0xAF,
	0xEB, 0xD0, 0x0A, 0x0A, 0x31, 0xB9, 0x16, 0xD5, 0xF7, 0x8B,
	0x33, 0x78, 0x8C, 0x07, 0x13, 0x67, 0x13, 0x03, 0xE9, 0x83,
	0x5B, 0xE4, 0xEA, 0x03, 0xFF, 0xFB, 0x92, 0x64, 0x13, 0x06,
	0xD4, 0x46, 0x4A, 0x54, 0xE3, 0x78, 0x62, 0x52, 0x30, 0x86,
	0x3A, 0x70, 0x00, 0x2C, 0xC0, 0x10, 0x59, 0x33, 0x53, 0x6D,
	0x30, 0xD5, 0x48, 0xC7, 0x19, 0xE9, 0x88, 0x00, 0xB3, 0x00,
	0x09, 0x6B, 0x25, 0x74, 0xD4, 0x68, 0x61, 0xB1, 0xAC, 0xC4,
	0xF7, 0x92, 0x55, 0x8F, 0x95, 0x8A, 0x19, 0xEF, 0x1E, 0xD6,
	0xD1, 0xC1, 0xA8, 0xF7, 0x8D, 0x68, 0x3D, 0x15, 0x1C, 0x27,
	0x2B, 0x42, 0x27, 0x49, 0xD1, 0xC3, 0x51, 0x21, 0x21, 0x1B,
	0x28, 0x41, 0x26, 0x12, 0x15, 0x33, 0x13, 0x46, 0x90, 0xA0,
	0x09, 0x1F, 0x0D, 0x54, 0x1D, 0x3B, 0x6C, 0xB5, 0xDD, 0x8F,
	0xA1, 0x66, 0x16, 0x37, 0x62, 0xCB, 0x7D, 0xBB, 0xDE, 0xDF,
	0x49, 0x35, 0xCE, 0xEA, 0x31, 0x1A, 0x1A, 0x3E, 0xAC, 0x4A,
	0x7B, 0xB7, 0x45, 0x1F, 0x68, 0x3F, 0x67, 0x73, 0xF5, 0xEC,
	0xFE, 0x61, 0xEB, 0xFC, 0x32, 0xAA, 0x51, 0xFA, 0x5B, 0xFB,
	0xC4, 0xE0, 0xFC, 0x9C, 0x03, 0x46, 0xC5, 0x4A, 0x80, 0x68,
	0x4D, 0x8F, 0x17, 0x0E, 0xEE, 0x59, 0x31, 0xCD, 0x5C, 0x7D,
	0x71, 0xE2, 0xF2, 0xA8, 0x1F, 0xB4, 0x0C, 0x41, 0x69, 0x4C,
	0xE1, 0xEA, 0x1A, 0x64, 0xCB, 0xCE, 0x61, 0x31, 0x78, 0xFA,
	0xC0, 0x30, 0x33, 0xFF, 0xFF, 0xFF, 0xE3, 0x43, 0x8C, 0x01,
	0x22, 0xDC, 0x00, 0xA7, 0x4A, 0xC3, 0x2C, 0x7F, 0x5E, 0x55,
	0xA2, 0xB7, 0x4E, 0x67, 0x65, 0xDC, 0xE2, 0xC3, 0x0D, 0x2A,
	0xE4, 0xC3, 0x2F, 0x8D, 0x48, 0xC0, 0x44, 0x68, 0x9B, 0x28,
	0xC0, 0x45, 0xDF, 0x3F, 0x01, 0xB7, 0x68, 0x5C, 0x08, 0xAD,
	0x76, 0x57, 0xD6, 0x26, 0xF4, 0xF5, 0x22, 0x4A, 0x65, 0xDB,
	0x66, 0x0D, 0x8D, 0x33, 0x4D, 0x30, 0x6A, 0x35, 0x0F, 0xAF,
	0xAC, 0x52, 0xA8, 0xA8, 0xE1, 0xEA, 0x87, 0x69, 0x2D, 0xC2,
	0x0D, 0xC9, 0xC6, 0x16, 0x2E, 0x98, 0x94, 0x50, 0xD3, 0x3A,
	0x69, 0x06, 0x2C, 0x24, 0xB0, 0x89, 0x12, 0xCA, 0xC3, 0x09,
	0xDD, 0x1B, 0xFB, 0x4F, 0x38, 0xE3, 0xBC, 0xC5, 0xFF, 0x54,
	0xE0, 0xF3, 0xB4, 0x5F, 0x72, 0x19, 0x27, 0x76, 0x07, 0x43,
	0xC0, 0x1A, 0x00, 0xC3, 0x66, 0x37, 0x7F, 0x48, 0xF3, 0x67,
	0xE3, 0x1D, 0xBF, 0xBE, 0x3F, 0xD3, 0x7F, 0x64, 0x0C, 0x3F,
	0x45, 0xB4, 0xB8, 0x7A, 0x4E, 0x0D, 0x23, 0x32, 0x1E, 0x5B,
	0x31, 0xB0, 0xEC, 0x72, 0x7E, 0x5B, 0x1E, 0x50, 0x55, 0x8E,
	0x88, 0x2B, 0x13, 0xA3, 0x0C, 0x04, 0x51, 0x02, 0xEC, 0xC0,
	0xDB, 0x36, 0x79, 0x72, 0xF8, 0x5B, 0x6D, 0x74, 0xDD, 0x96,
	0xE5, 0xDA, 0x4B, 0x8F, 0xFF, 0xFF, 0xFF, 0xAE, 0x33, 0xC0,
	0x00, 0x00, 0x00, 0x44, 0x41, 0xA8, 0xD8, 0xD3, 0x59, 0x2F,
	0x0C, 0xA1, 0x2B, 0x48, 0x41, 0x38, 0x40, 0xF0, 0xE4, 0xC5,
	0x60, 0x77, 0x86, 0x9A, 0x39, 0xB7, 0xDD, 0x6B, 0x43, 0x64,
	0xC1, 0xA2, 0x50, 0x60, 0x5C, 0x00, 0xF1, 0x04, 0xE9, 0x78,
	0x18, 0x2B, 0x88, 0xD5, 0x1C, 0xFB, 0x2B, 0xD6, 0x6B, 0x8F,
	0x73, 0x17, 0xFF, 0xFB, 0x92, 0x64, 0x1B, 0x02, 0xD4, 0x09,
	0x4A, 0xD5, 0xDB, 0x4C, 0x2D, 0x52, 0x30, 0xE6, 0x8A, 0x21,
	0x00, 0x2C, 0xC0, 0x8F, 0x29, 0x25, 0x5B, 0x8C, 0xB0, 0xD5,
	0x08, 0xD4, 0x1A, 0x67, 0xC0, 0x03, 0xBF, 0x00, 0x82, 0xB7,
	0xE7, 0xE0, 0xFA, 0xA6, 0x08, 0xDF, 0x80, 0xB5, 0xA5, 0x1F,
	0x39, 0x3D, 0x0B, 0xA0, 0x10, 0x69, 0x42, 0x5B, 0x5B, 0x26,
	0x21, 0x23, 0xFC, 0xB1, 0x0E, 0xE5, 0x96, 0x98, 0xB9, 0xAF,
	0x28, 0x54, 0x76, 0x84, 0xB5, 0x7D, 0x46, 0x94, 0xF7, 0xFA,
	0xE6, 0x5F, 0xD8, 0xE9, 0x6A, 0xB2, 0xB4, 0xD8, 0x77, 0x25,
	0x4E, 0x85, 0x18, 0x2A, 0xD0, 0x88, 0xF1, 0x67, 0x16, 0x17,
	0x50, 0x42, 0x4F, 0x7B, 0xA9, 0x15, 0x14, 0x7B, 0x2F, 0x1C,
	0xD8, 0xC9, 0xCE, 0x90, 0x1F, 0xC1, 0x45, 0xF3, 0xB2, 0xB8,
	0x22, 0x4D, 0x55, 0x63, 0x85, 0x2A, 0x17, 0x23, 0xB1, 0x54,
	0x45, 0x12, 0x5B, 0xBA, 0x10, 0xB8, 0xB5, 0x35, 0x2D, 0x3A,
	0x55, 0x32, 0xC9, 0x96, 0x51, 0xCA, 0x68, 0xEF, 0xEB, 0x71,
	0x0A, 0x03, 0xE7, 0xC9, 0xAB, 0xAD, 0x3F, 0x1F, 0xFF, 0xFF,
	0xFD, 0x4E, 0x16, 0xC0, 0x20, 0x00, 0x01, 0x89, 0x71, 0x2B,
	0x69, 0x4D, 0xB2, 0xB6, 0x2F, 0x96, 0xD1, 0xC3, 0x70, 0x8E,
	0x6B, 0xD7, 0xBD, 0x14, 0x92, 0x5F, 0x20, 0x91, 0xBA, 0x2E,
	0xAB, 0x09, 0x64, 0x5E, 0xE0, 0x12, 0x08, 0xE0, 0xA4, 0x3C,
	0x4D, 0xBC, 0x65, 0xAD, 0x12, 0x45, 0x2E, 0xBA, 0x9C, 0x83,
	0x32, 0xCF, 0x41, 0x35, 0xAB, 0x90, 0x23, 0xFA, 0xAA, 0xEB,
	0xFF, 0x9C, 0x79, 0xE1, 0xF8, 0x74, 0x7E, 0xAD, 0x12, 0xD4,
	0x37, 0x10, 0xE6, 0xAB, 0x8E, 0x18, 0x58, 0x64, 0xC9, 0x93,
	0xEF, 0x95, 0x79, 0xF7, 0x1D, 0x96, 0xA1, 0x6B, 0x2A, 0xD3,
	0x7C, 0xC6, 0xFF, 0xB3, 0x7F, 0xE8, 0xAC, 0x6F, 0x78, 0x4B,
	0xB6, 0xE6, 0xE3, 0x69, 0x57, 0xEC, 0x0D, 0x51, 0xE8, 0xE3,
	0xD4, 0xF9, 0xBD, 0xFF, 0x99, 0x7E, 0xDA, 0xB7, 0x47, 0xF7,
	0x5C, 0x6B, 0x42, 0xBF, 0x42, 0x10, 0x80, 0x94, 0xAE, 0x88,
	0x00, 0xC4, 0x34, 0x1E, 0xAB, 0xED, 0x09, 0xFE, 0xD3, 0xA3,
	0xFC, 0xC7, 0x30, 0x40, 0xC6, 0x42, 0xE5, 0x13, 0x22, 0x58,
	0xD1, 0x4B, 0x2E, 0x6E, 0xEF, 0xC3, 0xDF, 0x96, 0x03, 0x54,
	0x95, 0x9E, 0x0F, 0xF1, 0xF5, 0xA7, 0x17, 0x72, 0xB0, 0xE9,
	0x89, 0xDF, 0xFF, 0xFF, 0xFF, 0x86, 0xAA, 0x2A, 0x05, 0x01,
	0x00, 0x00, 0x02, 0x86, 0xB3, 0x4D, 0x6D, 0xD7, 0x68, 0xD0,
	0xE6, 0x2A, 0xF1, 0x9E, 0x80, 0x66, 0x34, 0x89, 0x64, 0x0F,
	0x1F, 0x71, 0xAB, 0xCC, 0x3F, 0xB3, 0x29, 0x63, 0x1E, 0xBE,
	0x95, 0x49, 0x67, 0x28, 0x8B, 0x01, 0xB7, 0x06, 0x83, 0x64,
	0x0C, 0xCB, 0xBC, 0x4B, 0x5F, 0xD7, 0x49, 0x89, 0xA4, 0xFF,
	0xC7, 0x43, 0xC2, 0x64, 0x25, 0x88, 0x5A, 0x3D, 0xA2, 0xEA,
	0x11, 0xAE, 0xFF, 0x3A, 0xF9, 0x12, 0x14, 0x45, 0xA6, 0x68,
	0x90, 0x49, 0x15, 0x53, 0x56, 0xD1, 0x2B, 0x05, 0x08, 0xB6,
	0xFF, 0xFB, 0x92, 0x64, 0x29, 0x80, 0xE3, 0xC2, 0x4F, 0xD6,
	0xD3, 0x49, 0x44, 0xD4, 0x31, 0x85, 0x6A, 0x00, 0x01, 0x58,
	0xC0, 0x0D, 0x85, 0x2D, 0x59, 0x8C, 0xA4, 0xB5, 0x08, 0xB7,
	0x16, 0x68, 0x04, 0x02, 0xE3, 0x00, 0x91, 0xEB, 0xC5, 0xD7,
	0xC8, 0xDF, 0x85, 0xE5, 0xFE, 0x09, 0xFA, 0x85, 0xF8, 0xB3,
	0xA6, 0x89, 0x1D, 0x1A, 0x4A, 0x98, 0xFF, 0xFF, 0xF3, 0x8D,
	0x71, 0xD2, 0x0E, 0xC8, 0x88, 0x7D, 0x08, 0xAF, 0x63, 0xC9,
	0x64, 0x14, 0x62, 0x3F, 0x62, 0x32, 0x60, 0xC9, 0x09, 0xA0,
	0xE4, 0x29, 0x89, 0x96, 0x21, 0x97, 0x5D, 0xDB, 0xEF, 0xDA,
	0xD5, 0x74, 0xC1, 0x42, 0x5B, 0x46, 0x77, 0x95, 0x9C, 0x10,
	0x21, 0x1A, 0x1D, 0x5A, 0xFF, 0xF9, 0x67, 0x86, 0xF5, 0xDF,
	0xAE, 0x0E, 0x06, 0x82, 0x93, 0x41, 0xA2, 0x83, 0x8D, 0xFF,
	0xFF, 0xFF, 0xA3, 0x52, 0x80, 0x40, 0x00, 0x00, 0x09, 0x8E,
	0x82, 0xB7, 0x2C, 0x03, 0xB1, 0x06, 0xFD, 0x75, 0x1A, 0x76,
	0x94, 0x1C, 0x8C, 0x09, 0x74, 0x03, 0xD9, 0x4C, 0x0D, 0xF2,
	0xE8, 0x39, 0x60, 0xA7, 0x68, 0x53, 0x9D, 0x78, 0x3D, 0x1C,
	0x87, 0xA5, 0x79, 0x33, 0x2F, 0x8C, 0x7F, 0x7F, 0xFE, 0xFC,
	0xDA, 0x7C, 0xB7, 0xB9, 0x82, 0x74, 0x89, 0x53, 0x8B, 0x45,
	0xD7, 0x0D, 0x51, 0x47, 0x6C, 0x12, 0xD8, 0xED, 0x80, 0xEB,
	0x33, 0x88, 0x4A, 0x21, 0x5D, 0x39, 0x10, 0xC2, 0x30, 0x61,
	0x73, 0x0E, 0x12, 0x2A, 0x68, 0xA9, 0xA2, 0xB4, 0xE4, 0x4D,
	0xEA, 0x77, 0x91, 0xE5, 0x66, 0x71, 0x1C, 0x87, 0x5D, 0xA1,
	0x6B, 0xFF, 0xB0, 0xA8, 0xE5, 0xCE, 0x72, 0x09, 0x9D, 0x73,
	0x36, 0x8F, 0xD0, 0x86, 0x09, 0x0B, 0x28, 0x18, 0x54, 0xE9,
	0x7D, 0x10, 0xF4, 0x9A, 0xB7, 0xB9, 0xCC, 0x2E, 0xD3, 0x41,
	0xEF, 0xC3, 0x2F, 0x7A, 0x93, 0xA5, 0x9C, 0xB7, 0x39, 0x05,
	0x4B, 0x9C, 0xC3, 0xF9, 0x8E, 0xFB, 0xF8, 0xF7, 0x0A, 0x8E,
	0xF2, 0x3F, 0xFF, 0xFF, 0xF8, 0x84, 0x8D, 0x92, 0x40, 0x12,
	0x00, 0x22, 0x00, 0x00, 0xC1, 0x55, 0xBD, 0x78, 0xA4, 0x2C,
	0x45, 0xF9, 0x97, 0xB7, 0x2C, 0x12, 0x54, 0xA4, 0x19, 0x7C,
	0xEC, 0x0D, 0x25, 0x74, 0xA5, 0xF7, 0x63, 0xEF, 0xB3, 0x2D,
	0x6B, 0x28, 0xFC, 0xC4, 0xE9, 0x7D, 0x63, 0x51, 0xF5, 0xA4,
	0x69, 0x66, 0xA9, 0x33, 0xF4, 0xF5, 0x54, 0x7A, 0xBC, 0x39,
	0xA5, 0x3D, 0x96, 0x21, 0x67, 0x13, 0x04, 0x40, 0x08, 0x01,
	0xEB, 0xB5, 0x96, 0x86, 0x1D, 0x91, 0xD0, 0x45, 0x35, 0x3A,
	0x9D, 0xB9, 0x83, 0xBA, 0xED, 0x54, 0xA4, 0xFD, 0xCB, 0x5E,
	0x74, 0xB6, 0x3F, 0xFF, 0xCB, 0xBC, 0x8C, 0x50, 0xA9, 0xF3,
	0xF2, 0xFA, 0xCC, 0x0C, 0xA1, 0x56, 0x6C, 0x7F, 0xF3, 0xFD,
	0x10, 0x13, 0x94, 0x4D, 0x60, 0x67, 0x51, 0xD6, 0x8E, 0xE2,
	0xC5, 0xFF, 0x2A, 0x4A, 0x18, 0x92, 0x90, 0x62, 0x8B, 0x8B,
	0x6A, 0x30, 0xE5, 0xA1, 0xDE, 0x7C, 0xEA, 0x5C, 0x4C, 0xDE,
	0x87, 0xAE, 0x0F, 0x43, 0x14, 0xE9, 0x3C, 0x57, 0xFF, 0xFB,
	0x92, 0x64, 0x46, 0x84, 0xE3, 0x91, 0x4F, 0x56, 0x6B, 0x2B,
	0x1C, 0xE0, 0x32, 0x25, 0xD9, 0xD0, 0x01, 0x4F, 0xC0, 0x0D,
	0x41, 0x3B, 0x57, 0x8C, 0xA4, 0xB5, 0x00, 0xC6, 0x97, 0xE7,
	0xCC, 0x01, 0x3F, 0x00, 0xD7, 0x70, 0x0D, 0xC8, 0x99, 0x44,
	0xED, 0x12, 0x6F, 0x27, 0x5F, 0x32, 0xA9, 0x1E, 0xBC, 0xBC,
	0x73, 0x9F, 0xFF, 0xFF, 0xFF, 0x11, 0x07, 0x45, 0x84, 0x08,
	0x00, 0x0C, 0x54, 0xFD, 0x78, 0xDE, 0xC5, 0x57, 0x66, 0x57,
	0x1E, 0x0A, 0x54, 0x3B, 0x91, 0x9B, 0x2C, 0x9E, 0x79, 0x5A,
	0xEC, 0x0F, 0x9B, 0xFB, 0x12, 0x7F, 0x98, 0xE2, 0xEC, 0x12,
	0x55, 0x76, 0x3E, 0xCF, 0x34, 0x5B, 0xB4, 0xF2, 0x87, 0x37,
	0x7F, 0xE4, 0xBF, 0xFA, 0x6A, 0xA1, 0x5F, 0xF9, 0xE8, 0x7D,
	0x86, 0x16, 0x68, 0xE0, 0xD8, 0x3E, 0x03, 0x11, 0x60, 0x62,
	0xCB, 0x6D, 0xBE, 0x5A, 0x37, 0x06, 0x4C, 0x92, 0x29, 0xA5,
	0x50, 0xC7, 0x70, 0x53, 0x03, 0x50, 0x59, 0x98, 0xE2, 0xF4,
	0xBB, 0xF7, 0xA7, 0xF5, 0x74, 0x53, 0x3E, 0x95, 0xB8, 0xB3,
	0xD8, 0xB6, 0x3B, 0xFF, 0xB9, 0x56, 0xBD, 0x98, 0x60, 0xF7,
	0xB1, 0xD1, 0x04, 0x42, 0xA8, 0x7F, 0xC1, 0x9D, 0x8E, 0x16,
	0x76, 0x74, 0x37, 0xDE, 0x0A, 0xCC, 0x4C, 0xAB, 0x53, 0xD1,
	0xD9, 0x18, 0x95, 0x2E, 0x49, 0xE5, 0x49, 0xB0, 0x17, 0x8B,
	0x0D, 0x8A, 0x17, 0xB4, 0x76, 0x8B, 0x3F, 0x8F, 0xD1, 0xA4,
	0x8E, 0x84, 0x70, 0xAC, 0x6B, 0x13, 0x72, 0x08, 0xFF, 0xFF,
	0xF2, 0x9F, 0xD2, 0x3A, 0x01, 0x03, 0x00, 0x13, 0x08, 0xA7,
	0xBF, 0x19, 0x6C, 0x90, 0x98, 0x0A, 0x50, 0xC3, 0xA9, 0x5B,
	0x98, 0xF9, 0x3D, 0xB1, 0x66, 0x1F, 0x93, 0x76, 0x7E, 0x56,
	0xDC, 0x1F, 0x94, 0x32, 0x2F, 0xDA, 0x16, 0xAD, 0x66, 0xDA,
	0x2C, 0x8F, 0x91, 0x07, 0xD4, 0x6A, 0xFF, 0xFF, 0xF5, 0xCE,
	0xB7, 0x4C, 0xFF, 0xE6, 0x6B, 0x71, 0x99, 0x6B, 0xA6, 0xA2,
	0xB3, 0xAA, 0x66, 0x1F, 0x6D, 0xB4, 0x42, 0x77, 0xE6, 0x8D,
	0x14, 0xA9, 0x47, 0xD5, 0x93, 0x4D, 0x5B, 0xBD, 0x6B, 0x5B,
	0x56, 0x30, 0x94, 0x32, 0x59, 0xBB, 0x7B, 0x20, 0x60, 0xA8,
	0x29, 0x55, 0xA0, 0xDD, 0x55, 0x19, 0xF6, 0x59, 0x46, 0x33,
	0x75, 0x0E, 0xFF, 0xE6, 0xD8, 0xF5, 0xC7, 0x41, 0x4E, 0x58,
	0xAA, 0x17, 0xFF, 0x9E, 0xD4, 0x4E, 0x4C, 0x8C, 0xEB, 0xAC,
	0xB0, 0x9B, 0xF5, 0x6C, 0x2F, 0xA8, 0x7A, 0xBD, 0x79, 0x10,
	0xC2, 0x8C, 0x8A, 0x57, 0x17, 0xC3, 0xC4, 0x92, 0x88, 0x62,
	0x18, 0xCE, 0xA2, 0xDA, 0x30, 0x71, 0xAA, 0x8F, 0x44, 0x85,
	0xCF, 0x15, 0x8B, 0xC3, 0xDD, 0x1A, 0xA6, 0xF0, 0xF5, 0xE7,
	0xED, 0x6F, 0xFF, 0x9F, 0xFD, 0x02, 0xC6, 0x04, 0x20, 0x0A,
	0x40, 0x00, 0x98, 0x12, 0xEB, 0x74, 0xCD, 0x99, 0xFB, 0x70,
	0x67, 0xDA, 0xDC, 0x70, 0x13, 0x28, 0xB0, 0xB3, 0xB1, 0x57,
	0x52, 0x37, 0x4D, 0x14, 0xBD, 0x2E, 0x76, 0xEF, 0xC4, 0x00,
	0xC0, 0x33, 0x67, 0x22, 0xBD, 0x61, 0xFF, 0xFB, 0x92, 0x64,
	0x65, 0x80, 0xC3, 0x68, 0x4D, 0x55, 0xCB, 0x2F, 0x14, 0xD2,
	0x35, 0x66, 0x49, 0xF0, 0x00, 0x2F, 0xC0, 0x0D, 0x21, 0x1D,
	0x59, 0xAC, 0xA4, 0x53, 0x48, 0xC6, 0xA3, 0xEA, 0x8C, 0x03,
	0x43, 0x1A, 0x00, 0x54, 0x91, 0x8B, 0x6D, 0x75, 0x2B, 0xD4,
	0xFB, 0x88, 0xE3, 0x1F, 0x73, 0xF6, 0xC9, 0xD3, 0x31, 0x8A,
	0x23, 0x25, 0xD0, 0x80, 0xAE, 0x3C, 0xF4, 0x08, 0x25, 0x28,
	0x32, 0xB9, 0x39, 0xA9, 0x2D, 0x28, 0xD3, 0xA7, 0x0E, 0xB1,
	0x01, 0xE3, 0xA1, 0x0B, 0xDD, 0xBD, 0xD1, 0x4B, 0x4A, 0x49,
	0xAF, 0x7D, 0xB1, 0x6C, 0xFC, 0xE8, 0x7F, 0xF6, 0x53, 0x08,
	0x1B, 0xCB, 0x4B, 0x08, 0xE0, 0x64, 0x40, 0x40, 0x01, 0xEC,
	0x7F, 0xFF, 0xED, 0x9D, 0x9E, 0x92, 0xB2, 0xC3, 0xE1, 0x52,
	0x54, 0x59, 0x89, 0x13, 0xD0, 0x3A, 0x08, 0x0C, 0x4D, 0xDF,
	0x17, 0x47, 0x18, 0x61, 0x88, 0xAC, 0xA3, 0xCE, 0xEF, 0xDB,
	0x3F, 0xEA, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x14, 0xD0, 0xCD,
	0x82, 0x30, 0x33, 0x6F, 0xF5, 0x18, 0xDE, 0xC0, 0x50, 0x00,
	0x48, 0x02, 0x40, 0x38, 0x0F, 0x2B, 0x48, 0x74, 0x59, 0x8C,
	0x79, 0x9E, 0x35, 0x9C, 0x0F, 0x12, 0x84, 0xC6, 0xDE, 0x1C,
	0x9C, 0x9C, 0x6D, 0x46, 0x9E, 0x16, 0x85, 0x91, 0x60, 0x00,
	0xB8, 0x46, 0x10, 0xD1, 0x40, 0xF6, 0x19, 0xC6, 0xBE, 0x29,
	0xA6, 0xD6, 0xBF, 0x99, 0x48, 0x97, 0xE4, 0xFC, 0x28, 0x4E,
	0x3F, 0xA8, 0x88, 0xF7, 0xA5, 0x5B, 0xB2, 0x75, 0x49, 0x5B,
	0xCA, 0x38, 0x8E, 0x13, 0x05, 0x87, 0xD9, 0xBA, 0x8E, 0x3A,
	0x6A, 0xC6, 0x1F, 0xE2, 0x8B, 0x0E, 0x50, 0x85, 0x21, 0x85,
	0x74, 0xB7, 0x04, 0x73, 0x94, 0xCA, 0x73, 0x10, 0xFE, 0x96,
	0x54, 0x68, 0x32, 0x37, 0x08, 0x33, 0x37, 0xFD, 0x5C, 0x9D,
	0x0E, 0xED, 0x30, 0xC0, 0x40, 0x00, 0x60, 0x7E, 0x7F, 0xA3,
	0x11, 0xC5, 0xF5, 0x40, 0xBB, 0xBA, 0xC9, 0x7E, 0x3D, 0x15,
	0xAF, 0xD2, 0x04, 0x28, 0x98, 0x28, 0x5A, 0x19, 0xCF, 0x73,
	0xA4, 0xD8, 0x34, 0x11, 0xE6, 0x52, 0x45, 0x5A, 0x71, 0xE4,
	0xE5, 0x46, 0x2F, 0x42, 0x82, 0xBA, 0x83, 0xB0, 0xDB, 0xD0,
	0xAF, 0xFF, 0xFF, 0xA7, 0xF3, 0x4B, 0x26, 0xA0, 0x44, 0x20,
	0x00, 0x80, 0x03, 0x81, 0xD8, 0x6E, 0x88, 0x7E, 0xD5, 0x1B,
	0x5C, 0x28, 0xD1, 0x31, 0x32, 0xD0, 0x9E, 0xDE, 0xCB, 0x2B,
	0xBC, 0x91, 0x2B, 0xF2, 0x99, 0x87, 0x42, 0x92, 0x55, 0x11,
	0x53, 0x65, 0xDE, 0xF7, 0x5B, 0xB0, 0xF1, 0xC5, 0xF5, 0x6B,
	0x3E, 0xB4, 0x7D, 0xFE, 0xF9, 0x53, 0xF5, 0xD5, 0xA5, 0xE2,
	0xD7, 0xBC, 0x81, 0xA2, 0xC1, 0x42, 0xC8, 0x26, 0x0D, 0x63,
	0x1D, 0x67, 0x10, 0x45, 0xE0, 0x98, 0xC3, 0xE8, 0xE6, 0x62,
	0xD3, 0x0E, 0x84, 0xC2, 0x28, 0x18, 0x75, 0x47, 0xF3, 0xD3,
	0x76, 0x42, 0x52, 0xA6, 0x6F, 0xF3, 0xD5, 0x0A, 0x42, 0xE1,
	0x44, 0x76, 0xFF, 0xB5, 0x52, 0xC8, 0xEC, 0x31, 0x1D, 0x0B,
	0x16, 0x27, 0xFC, 0xE4, 0xFF, 0xFB, 0x92, 0x64, 0x86, 0x00,
	0xD3, 0x5B, 0x4C, 0x55, 0xE3, 0x0C, 0x14, 0x60, 0x34, 0x05,
	0xBA, 0x43, 0x00, 0x2F, 0xC0, 0x0D, 0x35, 0x2D, 0x59, 0xCC,
	0x18, 0xB5, 0x00, 0xCC, 0x96, 0xE8, 0x04, 0x00, 0xBF, 0x00,
	0x43, 0x87, 0xF2, 0x1C, 0xCA, 0xB6, 0xCC, 0xB4, 0xF9, 0x0E,
	0x67, 0x27, 0x23, 0x94, 0x46, 0x4E, 0xC2, 0x52, 0x35, 0xC6,
	0xE9, 0x7A, 0x74, 0xD3, 0x15, 0x42, 0x29, 0x04, 0x99, 0x4E,
	0xF5, 0xEE, 0x18, 0x63, 0x67, 0x0A, 0x96, 0xFA, 0x05, 0x40,
	0xC4, 0x96, 0x38, 0xE7, 0xFF, 0xFF, 0xFE, 0x0A, 0xD5, 0x52,
	0xC0, 0x98, 0x00, 0x20, 0x00, 0x43, 0x0B, 0x6F, 0xA5, 0x4D,
	0x3D, 0xA1, 0x4C, 0x29, 0x63, 0xCE, 0xA5, 0x24, 0x67, 0x75,
	0xF6, 0x7F, 0x99, 0xDC, 0x5E, 0x8A, 0x23, 0x36, 0xE0, 0xC3,
	0x2E, 0x63, 0x3E, 0x6C, 0x2B, 0x52, 0x9A, 0xDC, 0x18, 0xB0,
	0x93, 0xB4, 0xD7, 0x23, 0x9E, 0x6F, 0x73, 0xA6, 0x67, 0x5A,
	0xA7, 0xFB, 0xF6, 0xB4, 0x07, 0xF2, 0x59, 0xA4, 0xC6, 0x3B,
	0x8B, 0x79, 0x61, 0x75, 0x40, 0xD2, 0xE3, 0xFD, 0x15, 0xAA,
	0x98, 0xAF, 0x0A, 0xE5, 0x65, 0xE7, 0xF2, 0x6F, 0xC8, 0x8C,
	0x8A, 0x82, 0x33, 0xA8, 0xAD, 0x4E, 0x99, 0xF9, 0xA4, 0xFE,
	0xF6, 0x43, 0x33, 0x2B, 0xD0, 0x77, 0x25, 0xD1, 0x12, 0xEA,
	0x86, 0xE0, 0xE2, 0xDF, 0xEF, 0xE3, 0x74, 0x22, 0xD4, 0x88,
	0x2C, 0xF6, 0x1C, 0x2C, 0x06, 0x00, 0x00, 0xC7, 0xEB, 0xF6,
	0x25, 0x33, 0xD6, 0x76, 0x32, 0xE8, 0x2D, 0x0E, 0x09, 0xCE,
	0x86, 0x84, 0x2C, 0xE3, 0x0F, 0xC2, 0x6C, 0x58, 0x53, 0xE2,
	0x7A, 0xCA, 0xB2, 0x87, 0x31, 0x85, 0xE8, 0xB6, 0x92, 0x90,
	0xBF, 0x43, 0x3C, 0x64, 0xE4, 0x69, 0x1C, 0xDA, 0xE6, 0xF1,
	0x64, 0xFF, 0xFF, 0xFF, 0xE4, 0x52, 0xA4, 0x04, 0x40, 0x0C,
	0xB1, 0xD0, 0x6D, 0x23, 0xF0, 0xE3, 0x73, 0x9F, 0x7E, 0xD6,
	0x41, 0x28, 0x1F, 0x5D, 0xBD, 0x36, 0x9E, 0x39, 0xC8, 0x93,
	0xF6, 0xBC, 0x9C, 0x16, 0xEE, 0xF5, 0xAD, 0xD0, 0xE7, 0xBC,
	0xB1, 0x65, 0x80, 0xD1, 0x91, 0x6D, 0x31, 0x5B, 0x9D, 0x0B,
	0xBF, 0xFE, 0x0A, 0x7B, 0x47, 0x70, 0xE6, 0x08, 0xA6, 0x68,
	0x98, 0x01, 0x1C, 0xB6, 0x9B, 0x92, 0x4F, 0x96, 0xFC, 0x80,
	0xAD, 0x66, 0x66, 0x67, 0x43, 0x53, 0xBC, 0x84, 0xD9, 0x71,
	0x90, 0x76, 0x2A, 0x20, 0x40, 0x99, 0x9F, 0x4A, 0xA1, 0xA8,
	0x6B, 0xB7, 0x32, 0xAD, 0x4A, 0x56, 0xA9, 0x9C, 0x31, 0x55,
	0x1D, 0x92, 0x4E, 0x47, 0x17, 0x50, 0x24, 0x17, 0x02, 0x95,
	0x00, 0x81, 0x00, 0xFC, 0xD7, 0x98, 0xB8, 0x7D, 0x39, 0x30,
	0x1E, 0xE5, 0xCC, 0x57, 0x8F, 0x89, 0x89, 0x30, 0x32, 0xC1,
	0xE6, 0x0E, 0xF0, 0x5E, 0xEC, 0x85, 0x02, 0xE8, 0xEA, 0x51,
	0x1E, 0x08, 0x73, 0x19, 0xD5, 0x2B, 0x12, 0x76, 0x2D, 0x5F,
	0x2A, 0xA5, 0x32, 0xD1, 0x57, 0x6C, 0x89, 0x4F, 0x0F, 0x7F,
	0xC0, 0x55, 0xA9, 0x07, 0xAA, 0x1D, 0xB0, 0x92, 0x00, 0x00,
	0x00, 0xE2, 0xFF, 0xFB, 0x92, 0x64, 0xA6, 0x83, 0xD3, 0x97,
	0x4E, 0xD5, 0x63, 0x2C, 0x2D, 0x50, 0x33, 0x65, 0xB9, 0xF3,
	0x00, 0x2F, 0xC0, 0x0D, 0x3D, 0x03, 0x54, 0x8C, 0x24, 0xF3,
	0x40, 0xD4, 0x19, 0xA7, 0x4C, 0x00, 0xBF, 0x03, 0x4B, 0x39,
	0x68, 0xD0, 0xA5, 0x90, 0x44, 0x2A, 0x8D, 0x87, 0x37, 0x61,
	0x2C, 0xB8, 0x10, 0xFC, 0xA2, 0x5A, 0xF1, 0xC5, 0x65, 0xB0,
	0x04, 0x07, 0x84, 0xA6, 0x3A, 0x20, 0x12, 0x07, 0x50, 0xDE,
	0x58, 0xA4, 0x8A, 0xDD, 0x1D, 0xCE, 0x86, 0xCF, 0x56, 0x67,
	0xE6, 0x0A, 0x67, 0x97, 0x5E, 0xD8, 0xF4, 0xCF, 0x9F, 0x38,
	0x44, 0x10, 0x9D, 0x3C, 0xF2, 0xD5, 0x6B, 0x14, 0x1F, 0xC3,
	0x5B, 0x5F, 0xD2, 0xA0, 0xD6, 0xC2, 0x5B, 0x2B, 0x22, 0xF8,
	0x59, 0x1C, 0x12, 0x01, 0x34, 0x85, 0x52, 0x1F, 0x6F, 0xEE,
	0xE9, 0xB9, 0xBC, 0xBC, 0x6B, 0x57, 0x9A, 0x1C, 0xF1, 0xF5,
	0xB7, 0xEC, 0x7D, 0xE9, 0x8D, 0xFA, 0xFA, 0xB8, 0x7A, 0x7F,
	0x0F, 0x2D, 0xFE, 0x72, 0xED, 0xF9, 0xCF, 0x35, 0x8F, 0x4C,
	0x04, 0x00, 0x00, 0x07, 0xFC, 0xFF, 0xFE, 0x5C, 0xCA, 0x59,
	0xA8, 0x8E, 0xA2, 0x4C, 0x3D, 0x41, 0x7C, 0x4E, 0xC3, 0x04,
	0xFA, 0x39, 0x57, 0x48, 0xE7, 0x6F, 0x64, 0x66, 0x57, 0xB0,
	0xB5, 0xBF, 0x79, 0xF2, 0x77, 0x9F, 0xE8, 0xB2, 0xEE, 0x71,
	0x2D, 0x29, 0x16, 0x58, 0x99, 0x59, 0xBF, 0xC1, 0xC6, 0x87,
	0x8F, 0xF3, 0x20, 0xA7, 0x03, 0x20, 0x00, 0x00, 0x80, 0x83,
	0x20, 0x58, 0xCC, 0x63, 0x94, 0xCA, 0x3B, 0x8B, 0xE9, 0xD2,
	0x0D, 0x31, 0x7E, 0xAA, 0x30, 0x98, 0xD8, 0x5F, 0xC7, 0x74,
	0x89, 0x7E, 0x4C, 0xCB, 0x61, 0x26, 0x11, 0xA0, 0xC9, 0x61,
	0x5A, 0x52, 0x4E, 0x71, 0x15, 0x19, 0x5D, 0x03, 0xEE, 0x37,
	0xF3, 0x1C, 0x7B, 0xBB, 0x46, 0xFB, 0x0D, 0x52, 0x9C, 0x46,
	0x6C, 0xD2, 0xC6, 0xD3, 0x15, 0x81, 0xFB, 0x62, 0xE5, 0x85,
	0xB2, 0xBB, 0x1F, 0x79, 0x2B, 0xDC, 0xC0, 0x75, 0x32, 0x4D,
	0x7D, 0x43, 0xE2, 0x78, 0x9E, 0xB7, 0x36, 0xBA, 0x3B, 0x11,
	0xF6, 0x9F, 0xCF, 0xF0, 0xED, 0x59, 0x7D, 0x6A, 0xCC, 0x7C,
	0x6C, 0xFA, 0x73, 0x35, 0xA2, 0x45, 0x2D, 0xEE, 0x81, 0x7E,
	0x56, 0x8C, 0xCD, 0x30, 0xE6, 0xBD, 0xA7, 0x9B, 0xF3, 0x01,
	0x40, 0xFF, 0x65, 0xFF, 0xF2, 0xA7, 0x09, 0x89, 0xB6, 0x48,
	0xD1, 0x65, 0x84, 0xD0, 0xD9, 0x7B, 0x72, 0x3A, 0x0A, 0xEA,
	0xB9, 0x3E, 0x9D, 0xFC, 0x76, 0x68, 0x6D, 0xF5, 0x83, 0xAC,
	0x93, 0xD0, 0xBF, 0x00, 0x0E, 0x4E, 0x4A, 0xD4, 0xD9, 0x40,
	0xB0, 0x7E, 0xB0, 0xEA, 0xBA, 0x44, 0x39, 0x17, 0xD6, 0x72,
	0x47, 0x3D, 0x11, 0x32, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x50,
	0x3D, 0x58, 0x79, 0xD2, 0x67, 0xB0, 0xF3, 0x4E, 0x96, 0x30,
	0xD7, 0x45, 0xB5, 0x6C, 0xF5, 0x64, 0x2F, 0xB4, 0xBE, 0x62,
	0x86, 0x53, 0x76, 0x91, 0xB0, 0xCC, 0x3B, 0xC8, 0x4D, 0x4B,
	0x77, 0x48, 0x1B, 0x90, 0x24, 0x68, 0xE3, 0xA6, 0x82, 0x93,
	0xFF, 0xFB, 0x92, 0x64, 0xC2, 0x82, 0xD3, 0xB7, 0x49, 0x55,
	0x63, 0x0C, 0x34, 0xD2, 0x34, 0xE6, 0x79, 0xD3, 0x00, 0x2F,
	0xC0, 0x8E, 0x8D, 0x01, 0x53, 0xA7, 0xB0, 0xD3, 0x48, 0xD2,
	0x1A, 0x26, 0xCC, 0x00, 0xBF, 0x02, 0x8C, 0xF6, 0xE7, 0xE9,
	0x6A, 0x8E, 0x24, 0xC2, 0x6C, 0x92, 0xB3, 0x32, 0xE2, 0xBA,
	0x24, 0x01, 0x89, 0x82, 0x8F, 0x46, 0x89, 0x63, 0xA7, 0x44,
	0x6B, 0x40, 0xE8, 0x41, 0xC9, 0x20, 0x4C, 0x2B, 0x8D, 0x89,
	0x98, 0x4A, 0x40, 0x90, 0x84, 0xCC, 0xBF, 0x72, 0x96, 0x6F,
	0x2F, 0xFF, 0x1A, 0xB4, 0x65, 0xDA, 0x8E, 0xCF, 0x5E, 0x3F,
	0xFF, 0x4A, 0xB7, 0x28, 0xC7, 0xCC, 0x36, 0x4F, 0x79, 0xF6,
	0x93, 0x92, 0xDC, 0xA5, 0x5F, 0xF4, 0x3A, 0x4F, 0xC0, 0x54,
	0xC5, 0xF0, 0xB3, 0xC5, 0x24, 0x21, 0x10, 0x37, 0x6A, 0x16,
	0x21, 0xEA, 0x43, 0x44, 0xBC, 0x2B, 0xE1, 0x30, 0xCF, 0x3B,
	0x02, 0xE1, 0xEC, 0x2F, 0xAF, 0xD2, 0x47, 0x39, 0x8A, 0x74,
	0x97, 0x55, 0xA4, 0x54, 0x75, 0x1B, 0x0B, 0x47, 0xE9, 0x24,
	0x6A, 0x12, 0x8A, 0x3F, 0xA7, 0x6B, 0x45, 0x00, 0x04, 0x44,
	0x89, 0x79, 0x53, 0x12, 0xA2, 0x54, 0x4E, 0xE3, 0xE8, 0xB9,
	0x18, 0xD0, 0xA0, 0x97, 0x27, 0x26, 0xE5, 0x86, 0x27, 0xAA,
	0x06, 0x53, 0xF4, 0xB0, 0x93, 0x00, 0xCE, 0x21, 0xE0, 0x12,
	0xA9, 0x73, 0x31, 0x2B, 0x2C, 0xBA, 0xAD, 0xB7, 0x12, 0x42,
	0x33, 0xF4, 0xD3, 0xD9, 0x50, 0x0E, 0x09, 0x25, 0x87, 0xA4,
	0x93, 0x66, 0xCB, 0x9D, 0x49, 0x23, 0x88, 0x95, 0xD3, 0x7A,
	0xDE, 0x28, 0xAC, 0x22, 0x81, 0x16, 0x8B, 0x91, 0x08, 0x51,
	0x22, 0x02, 0x2A, 0x4F, 0x93, 0xA2, 0xAB, 0x95, 0x9A, 0x6B,
	0xE5, 0xF4, 0xAD, 0x53, 0x2A, 0xBB, 0xFC, 0x8C, 0x61, 0x1C,
	0xBD, 0x9F, 0x9B, 0x41, 0x47, 0x49, 0xF2, 0x21, 0x44, 0xD6,
	0xCB, 0x96, 0x62, 0xFD, 0x78, 0x2B, 0x61, 0xBB, 0x7A, 0x00,
	0x20, 0x1F, 0xF5, 0xFA, 0x86, 0xE0, 0x9F, 0x40, 0x0D, 0x07,
	0xBC, 0x16, 0xA4, 0x7D, 0x03, 0x63, 0xC8, 0x28, 0x0E, 0xC7,
	0x92, 0x54, 0x70, 0x03, 0x0C, 0x5D, 0xD2, 0xE7, 0xE9, 0x38,
	0x37, 0xEA, 0x8D, 0x79, 0xAF, 0x9F, 0x5D, 0x21, 0xD7, 0x8F,
	0x26, 0xD0, 0xDA, 0xAA, 0x7F, 0x6E, 0x8C, 0xE3, 0x14, 0x5A,
	0x38, 0x88, 0xFE, 0x95, 0x74, 0xF2, 0xA9, 0x35, 0xB6, 0xDE,
	0xBE, 0x6D, 0x62, 0x36, 0xAD, 0x77, 0x9D, 0x36, 0x4D, 0x13,
	0x6C, 0x29, 0xC2, 0x9D, 0x2E, 0x12, 0xEC, 0x5F, 0xEA, 0x56,
	0x67, 0x11, 0x90, 0x01, 0x50, 0x32, 0xF6, 0x02, 0x93, 0xCB,
	0x79, 0x73, 0xB4, 0xA7, 0x79, 0xEC, 0x44, 0xDA, 0xAF, 0xA3,
	0xDB, 0x05, 0x4F, 0x55, 0xA5, 0x80, 0x6D, 0xCC, 0x43, 0xCD,
	0xA6, 0x57, 0x63, 0x6F, 0xE5, 0xF5, 0x7A, 0xA2, 0xD1, 0xF8,
	0xAB, 0x66, 0xA9, 0x01, 0x34, 0xE7, 0x89, 0xC7, 0x85, 0x27,
	0xA7, 0x14, 0xB6, 0x03, 0x7D, 0x9D, 0xD7, 0xCD, 0x8F, 0xC5,
	0xE0, 0x9B, 0x72, 0xB8, 0x6D, 0xDE, 0x86, 0x9B, 0xFF, 0xFB,
	0x92, 0x64, 0xD7, 0x03, 0xD3, 0xBC, 0x41, 0x54, 0xEB, 0x09,
	0x34, 0xD2, 0x2F, 0x86, 0x89, 0xC0, 0x02, 0x4F, 0xD0, 0x0E,
	0x51, 0x1D, 0x51, 0x07, 0xA4, 0x73, 0xC8, 0xC8, 0x99, 0xA6,
	0x8C, 0x08, 0xBF, 0x0B, 0xCA, 0x16, 0xAA, 0xBA, 0x58, 0xFA,
	0x1D, 0x84, 0xC4, 0xED, 0x43, 0x8F, 0x6D, 0x7A, 0x5B, 0x33,
	0xAE, 0xF4, 0xB5, 0xC1, 0x7F, 0x6B, 0xCC, 0xC8, 0xC7, 0x86,
	0x57, 0x1A, 0x1D, 0x8F, 0xAE, 0x2A, 0x85, 0x7B, 0x0A, 0x2C,
	0x71, 0x57, 0x12, 0x23, 0x58, 0x53, 0x85, 0x01, 0x60, 0x09,
	0x3F, 0x26, 0xA8, 0xA1, 0x7C, 0x8A, 0x60, 0x9D, 0x4C, 0x62,
	0x15, 0x9F, 0x55, 0x0B, 0xB9, 0x2B, 0x22, 0x7D, 0x6A, 0xA9,
	0xCE, 0xBD, 0x6C, 0xDC, 0x37, 0xC5, 0xFF, 0xFF, 0xC4, 0x74,
	0x02, 0x20, 0xE0, 0xA5, 0x26, 0x2A, 0xA3, 0x06, 0x30, 0xC0,
	0x5A, 0x01, 0x19, 0x98, 0x8F, 0x1E, 0x0F, 0x99, 0x72, 0x9C,
	0xC0, 0x34, 0xE3, 0x98, 0xE0, 0x02, 0xC2, 0x32, 0x8D, 0x2A,
	0xC4, 0x16, 0xA1, 0x8A, 0x32, 0x80, 0xE7, 0x5B, 0x82, 0x27,
	0xE3, 0xEA, 0x86, 0x57, 0x5C, 0x57, 0x54, 0x52, 0x59, 0x21,
	0xD5, 0x0D, 0x83, 0x24, 0x87, 0x9C, 0xC4, 0x00, 0xC3, 0x7E,
	0x51, 0xB1, 0xE2, 0x53, 0x27, 0xCD, 0x92, 0x3E, 0xAF, 0x8E,
	0x6C, 0xE3, 0xAF, 0x1C, 0x95, 0xD6, 0x76, 0x65, 0x4F, 0xB4,
	0x0D, 0x1B, 0xA4, 0x93, 0xC3, 0xAB, 0x08, 0x5A, 0x85, 0xEF,
	0x0B, 0x3E, 0x12, 0xC0, 0x70, 0x9E, 0x39, 0x09, 0xD1, 0x12,
	0x55, 0xAB, 0xA4, 0xCE, 0xB8, 0x5E, 0x53, 0x45, 0x0B, 0xEA,
	0xAD, 0x0A, 0xD9, 0x45, 0xE7, 0xE7, 0xA8, 0x68, 0xEF, 0xA0,
	0x59, 0x37, 0x95, 0x00, 0x71, 0x97, 0x37, 0x56, 0x93, 0x45,
	0xC7, 0x40, 0xC2, 0xA4, 0xA6, 0xD3, 0x49, 0x71, 0x09, 0x70,
	0x84, 0x62, 0x86, 0x0D, 0x56, 0xAE, 0xC7, 0x96, 0x9E, 0xD1,
	0xDE, 0x32, 0xBC, 0x57, 0x29, 0xA3, 0x17, 0xB7, 0xA8, 0x95,
	0x93, 0xF4, 0x91, 0x2A, 0x8B, 0xE3, 0x31, 0x9C, 0x4D, 0x23,
	0x2E, 0x7A, 0x18, 0x81, 0x0A, 0x4B, 0x9D, 0xB5, 0xB3, 0x37,
	0xFF, 0xAB, 0xCA, 0x6F, 0x63, 0x59, 0x67, 0x4E, 0x93, 0xFF,
	0xFF, 0xF6, 0xEB, 0x47, 0x21, 0x30, 0x98, 0x01, 0xA5, 0xC1,
	0x8D, 0x21, 0x0C, 0x51, 0xB5, 0xD4, 0x5F, 0x48, 0xCE, 0x08,
	0x81, 0x6C, 0x52, 0x01, 0xC6, 0x0D, 0x32, 0xE1, 0x28, 0x10,
	0x09, 0x72, 0x2C, 0x6E, 0x51, 0x5E, 0xEF, 0xCF, 0xCB, 0xA5,
	0x15, 0x2D, 0x58, 0xA2, 0xD4, 0xE7, 0x08, 0x1C, 0x2D, 0x11,
	0x90, 0x00, 0x00, 0x03, 0x03, 0x7B, 0x35, 0x87, 0x41, 0xD5,
	0x00, 0x62, 0xEF, 0xC3, 0x4F, 0xB4, 0xF1, 0xB2, 0x98, 0x21,
	0xF4, 0x7A, 0xE3, 0xAF, 0x0D, 0x33, 0xCE, 0xFB, 0x5F, 0x84,
	0x38, 0x8A, 0x82, 0x1F, 0x52, 0x48, 0xB4, 0x9F, 0x8F, 0xB5,
	0xBB, 0x2D, 0xAB, 0xAA, 0xA5, 0x54, 0xB2, 0xB3, 0xC5, 0x8B,
	0x03, 0xE1, 0xAA, 0x2B, 0xD7, 0x8B, 0xB5, 0x42, 0xE0, 0xFE,
	0x53, 0xC4, 0x62, 0x54, 0x9A, 0x50, 0xFF, 0xFB, 0x92, 0x64,
	0xF0, 0x02, 0xF5, 0x50, 0x4C, 0x4F, 0x83, 0x18, 0x64, 0x72,
	0x3B, 0xE6, 0x99, 0x20, 0x03, 0x2C, 0xD2, 0x10, 0x9D, 0x25,
	0x46, 0xCC, 0x31, 0x33, 0x88, 0xC7, 0x9A, 0x25, 0x80, 0x0C,
	0x0B, 0x50, 0x50, 0x96, 0x26, 0xD5, 0x62, 0x10, 0x77, 0x15,
	0xED, 0xD1, 0xA1, 0xAB, 0xDF, 0xB2, 0x69, 0x5F, 0x04, 0xBF,
	0x2A, 0x51, 0x03, 0x4D, 0x73, 0x46, 0x15, 0xDA, 0xB5, 0x0F,
	0x80, 0x55, 0x0A, 0xE4, 0x8C, 0x39, 0x03, 0xE1, 0x7A, 0xAD,
	0xA1, 0x7B, 0x73, 0x9B, 0xE1, 0x45, 0x58, 0x9A, 0x09, 0x54,
	0x93, 0x6D, 0x46, 0x96, 0xC8, 0xAF, 0xAD, 0xB6, 0x69, 0x83,
	0x03, 0xAB, 0xAA, 0xB6, 0x9A, 0x6A, 0x12, 0x5A, 0x12, 0xD9,
	0xFB, 0x4E, 0xFB, 0x70, 0x37, 0x62, 0x8A, 0xC1, 0xE7, 0x3B,
	0xF5, 0x0E, 0x41, 0x60, 0x1A, 0x50, 0x07, 0x49, 0x1A, 0x9D,
	0x2B, 0xF9, 0x4D, 0xCC, 0x4B, 0xAE, 0x8A, 0xED, 0xFA, 0x3F,
	0xBB, 0x0A, 0x04, 0x28, 0x84, 0xAA, 0x83, 0xB3, 0xD4, 0x02,
	0xF3, 0xDF, 0xD4, 0x00, 0xFD, 0xB2, 0x06, 0xAD, 0x3F, 0x96,
	0x14, 0x10, 0x26, 0x31, 0x49, 0xB9, 0x3D, 0x4B, 0x48, 0x18,
	0xCB, 0x1C, 0x6F, 0xA1, 0x2D, 0x23, 0x9E, 0x15, 0x1E, 0x62,
	0xAF, 0xFD, 0x75, 0x47, 0x4E, 0xC5, 0x66, 0x55, 0xCC, 0x09,
	0x75, 0xAA, 0xCB, 0x6A, 0xBC, 0x69, 0x68, 0xD3, 0xD1, 0x98,
	0x42, 0xD2, 0x0F, 0x23, 0x12, 0xD1, 0x32, 0x57, 0xA8, 0xCF,
	0xD1, 0xD4, 0xB4, 0x76, 0x13, 0xF8, 0xCC, 0x12, 0xF6, 0xF8,
	0xAA, 0x43, 0xBD, 0x53, 0x95, 0x69, 0xFC, 0x7A, 0xCD, 0x05,
	0x4A, 0x96, 0x72, 0x71, 0x5A, 0x69, 0x3B, 0x8F, 0xC3, 0x9D,
	0x58, 0x35, 0xD2, 0x49, 0x54, 0xC1, 0xB0, 0x93, 0x3A, 0x4C,
	0xA5, 0x83, 0xD4, 0xD9, 0x7A, 0x48, 0x09, 0xE2, 0x65, 0x0F,
	0x67, 0x7A, 0x7E, 0x1D, 0xC2, 0xDE, 0x76, 0x1B, 0x34, 0x98,
	0x49, 0x28, 0x3D, 0x43, 0xC6, 0x1D, 0x71, 0xB5, 0xBD, 0x2D,
	0xD2, 0x86, 0xB7, 0x4A, 0x7C, 0x2B, 0x3E, 0x82, 0x86, 0x8B,
	0x51, 0xD8, 0x95, 0xED, 0x2C, 0x69, 0xEA, 0x17, 0xD4, 0xB6,
	0x5D, 0x3D, 0x52, 0xC9, 0x7D, 0x62, 0x92, 0x91, 0x36, 0x29,
	0x12, 0x23, 0xBD, 0x25, 0x8B, 0xBE, 0x60, 0xAB, 0x1E, 0xDC,
	0x35, 0xF4, 0x55, 0x20, 0x10, 0x10, 0x35, 0xD2, 0x1D, 0x34,
	0x07, 0x29, 0xA1, 0x07, 0xE8, 0xDD, 0x3E, 0x45, 0xE2, 0x59,
	0x0A, 0x26, 0x80, 0xB1, 0x23, 0xB7, 0x29, 0x36, 0x1F, 0x0E,
	0x76, 0x27, 0xE2, 0x4E, 0x5D, 0x18, 0x92, 0xCB, 0xB9, 0xA1,
	0x8F, 0xC4, 0x7A, 0xE9, 0x5C, 0x70, 0x10, 0x76, 0x45, 0x06,
	0x01, 0x00, 0x00, 0x02, 0x0F, 0x78, 0x53, 0x06, 0x15, 0x93,
	0xC5, 0xA1, 0x85, 0x2C, 0x76, 0x57, 0xA3, 0x5E, 0x67, 0x8F,
	0xE3, 0x2F, 0x97, 0xB0, 0xE7, 0xF5, 0xC4, 0x7A, 0x1E, 0x77,
	0x25, 0xFE, 0x65, 0xA8, 0xAA, 0x04, 0x04, 0x88, 0xE1, 0x02,
	0x95, 0xE3, 0x31, 0x2E, 0x6D, 0x52, 0x1C, 0x67, 0x92, 0xA4,
	0x4E, 0x09, 0x71, 0x5A, 0xFF, 0xFB, 0x92, 0x64, 0xE0, 0x87,
	0xF4, 0x87, 0x49, 0x50, 0xCB, 0x2F, 0x4D, 0x42, 0x30, 0x86,
	0x89, 0x90, 0x00, 0xF8, 0xD0, 0x13, 0x11, 0x25, 0x3C, 0xAC,
	0xBD, 0x93, 0x40, 0xBE, 0x9A, 0x25, 0xC0, 0x01, 0x3F, 0x40,
	0xCF, 0x13, 0xD7, 0x4F, 0xD4, 0x6C, 0x91, 0x28, 0xD7, 0x06,
	0x3A, 0xD1, 0x71, 0x3B, 0x96, 0xD4, 0xEB, 0xA2, 0x90, 0xF0,
	0x42, 0xD4, 0x22, 0xE8, 0x6B, 0x4C, 0xA1, 0x6F, 0x6A, 0x52,
	0x31, 0x2B, 0xCC, 0x05, 0xE6, 0x55, 0xC2, 0xA0, 0xED, 0x08,
	0xE8, 0xDE, 0x6D, 0x53, 0xAE, 0x89, 0xDA, 0x54, 0x35, 0x3D,
	0x1F, 0x29, 0xF7, 0x9C, 0x4F, 0x03, 0x25, 0xE8, 0x4E, 0x4F,
	0x28, 0xB9, 0xC7, 0xD2, 0x9D, 0x72, 0xA3, 0xBE, 0x78, 0xC4,
	0xCD, 0xF3, 0x4A, 0x9C, 0xC0, 0xFD, 0x96, 0x2E, 0xBF, 0x9F,
	0x16, 0xD0, 0x09, 0x2A, 0xA1, 0x24, 0xB0, 0xF9, 0x31, 0x2B,
	0xC3, 0x99, 0xE9, 0x69, 0x6B, 0xDB, 0x9E, 0xE2, 0x84, 0x63,
	0xFE, 0x83, 0x4A, 0x0C, 0x2E, 0x14, 0xF4, 0xBD, 0xF7, 0x05,
	0xD4, 0x22, 0xA5, 0x23, 0x04, 0x76, 0x0E, 0xA4, 0x52, 0x56,
	0x19, 0xE3, 0x46, 0xD1, 0x71, 0x3F, 0x18, 0xAE, 0x5E, 0x04,
	0xCC, 0xDD, 0x73, 0x8C, 0x66, 0xC3, 0x48, 0x9C, 0x0D, 0x85,
	0xC1, 0x77, 0x32, 0x58, 0xE1, 0xD0, 0x18, 0x64, 0x9E, 0x9F,
	0xB1, 0x80, 0x10, 0x29, 0xC4, 0xA9, 0x03, 0x82, 0x3E, 0x4D,
	0x02, 0x19, 0x08, 0x10, 0xE0, 0xC3, 0x71, 0xD9, 0x33, 0x8C,
	0xD5, 0x1B, 0x12, 0xFA, 0x57, 0x29, 0xCB, 0x61, 0xA8, 0x22,
	0x28, 0xB1, 0xB0, 0x37, 0x14, 0x42, 0x1A, 0x14, 0xFF, 0xD4,
	0x52, 0x09, 0xF7, 0x61, 0x94, 0xB7, 0x36, 0x68, 0xAE, 0xA2,
	0xAD, 0xDD, 0x4F, 0xA6, 0x06, 0x25, 0xDB, 0x1D, 0x9F, 0xAB,
	0x19, 0xD1, 0xA6, 0x90, 0xF5, 0x2D, 0x34, 0xE9, 0x98, 0xF5,
	0x1C, 0x81, 0x8C, 0xA8, 0x10, 0x02, 0x6E, 0xA9, 0x65, 0x61,
	0x32, 0xCB, 0xC3, 0x82, 0xA5, 0x85, 0x3E, 0x69, 0x30, 0x8F,
	0xB2, 0xEA, 0x5C, 0xA5, 0x50, 0xB0, 0x8F, 0x60, 0x6F, 0x87,
	0x65, 0xB2, 0xCA, 0x0A, 0xE6, 0x6E, 0x2A, 0x43, 0x2F, 0x09,
	0x4F, 0x9C, 0x88, 0x29, 0x56, 0x2F, 0x26, 0x2E, 0x64, 0xC0,
	0x00, 0x9B, 0x1F, 0xFD, 0x0C, 0xE8, 0x47, 0x5F, 0x65, 0xC7,
	0x75, 0x65, 0x6F, 0x9F, 0x24, 0x3B, 0xBA, 0x38, 0x85, 0xC8,
	0x64, 0x96, 0x2E, 0xA8, 0xB0, 0xBC, 0xFB, 0xBC, 0x0E, 0x9B,
	0x15, 0xDA, 0x38, 0xF3, 0xFD, 0x38, 0xE4, 0x7D, 0xE8, 0x24,
	0x08, 0x43, 0x68, 0xBE, 0xA4, 0x50, 0x63, 0xBA, 0xE9, 0x17,
	0x14, 0xA3, 0xA2, 0x25, 0x24, 0xEB, 0x49, 0x5F, 0x86, 0x42,
	0xE1, 0x1F, 0x12, 0x1B, 0xC8, 0x49, 0x28, 0x26, 0x8A, 0xD7,
	0x39, 0xA1, 0x0E, 0x10, 0x30, 0x88, 0xD1, 0x3B, 0x0C, 0x8B,
	0xAA, 0x00, 0x8F, 0x08, 0x62, 0x25, 0x43, 0xA3, 0x0B, 0x24,
	0xFB, 0x20, 0x5B, 0xC0, 0x8F, 0xAC, 0x44, 0x04, 0x3A, 0xA5,
	0x47, 0x95, 0xDC, 0xCF, 0xC3, 0x81, 0x46, 0x36, 0x85, 0x2E,
	0x72, 0x5D, 0xFF, 0xFB, 0x92, 0x64, 0xDA, 0x82, 0xF4, 0xDA,
	0x47, 0xCF, 0x4B, 0x4F, 0x64, 0xD2, 0x2D, 0x66, 0x99, 0x40,
	0x00, 0xAF, 0xD0, 0x14, 0x31, 0x21, 0x36, 0x4D, 0x3D, 0x96,
	0xC0, 0xAC, 0x1A, 0x25, 0x00, 0x03, 0xBF, 0x40, 0xB8, 0x25,
	0xF0, 0x00, 0x3A, 0x01, 0x44, 0xF9, 0x2C, 0x70, 0x35, 0x55,
	0x0E, 0x19, 0x2C, 0x09, 0x40, 0x44, 0x41, 0x1D, 0x8E, 0x23,
	0x23, 0xBA, 0x0A, 0x8C, 0x3C, 0xCE, 0xA5, 0x51, 0x9C, 0xD3,
	0xA6, 0xE6, 0x53, 0xD1, 0xB9, 0xF1, 0x99, 0x48, 0x92, 0xAE,
	0x4D, 0xC4, 0x88, 0x49, 0x06, 0xE8, 0xE8, 0x3C, 0x10, 0xA3,
	0x96, 0x87, 0x9C, 0xC6, 0xE8, 0xCD, 0x39, 0x94, 0x51, 0x8E,
	0xFB, 0x93, 0xF0, 0xCE, 0x27, 0xC5, 0xC5, 0x40, 0x5B, 0xCF,
	0x62, 0x90, 0xB8, 0xA1, 0xA8, 0xF4, 0xE3, 0x66, 0x95, 0xCD,
	0x6D, 0xC9, 0x06, 0x46, 0xF6, 0x15, 0xFD, 0x4A, 0xD8, 0xD7,
	0x1A, 0x1C, 0x54, 0x23, 0x49, 0xD5, 0x22, 0x4D, 0x4C, 0x9E,
	0x29, 0x1F, 0x1B, 0xCA, 0x76, 0xC3, 0x29, 0x2A, 0xDF, 0x6D,
	0x3C, 0x66, 0xC9, 0x85, 0x44, 0xD3, 0x54, 0x64, 0xEA, 0xD1,
	0xFE, 0xA3, 0x53, 0x41, 0x3A, 0x92, 0x6E, 0x99, 0x47, 0x54,
	0x14, 0xF3, 0x22, 0xB6, 0x23, 0xAD, 0xCB, 0xFF, 0xFE, 0x15,
	0x32, 0x30, 0x1C, 0xE4, 0x41, 0xC2, 0xC3, 0xA6, 0x13, 0x7E,
	0x21, 0x02, 0xCC, 0x83, 0x21, 0x31, 0xA3, 0xAC, 0x13, 0x7C,
	0x4E, 0x7A, 0x63, 0x07, 0xB2, 0x69, 0xE2, 0x8C, 0xBC, 0xAE,
	0x1D, 0xB5, 0x2A, 0x87, 0xC9, 0xD5, 0x71, 0xB8, 0xD4, 0xC8,
	0x20, 0x18, 0x50, 0xD4, 0xE5, 0x2C, 0x2B, 0x18, 0x5E, 0x62,
	0xC0, 0xB1, 0x00, 0x76, 0xE1, 0x0F, 0x39, 0xE4, 0xC5, 0xEA,
	0xBC, 0xF1, 0x06, 0xDD, 0x21, 0xA3, 0x69, 0x83, 0x16, 0x6B,
	0xEC, 0x89, 0x3A, 0xD6, 0xB9, 0x78, 0xC6, 0x51, 0x98, 0xB2,
	0x85, 0xF1, 0x04, 0x38, 0x02, 0x72, 0xEA, 0x0F, 0xC1, 0xB4,
	0xA0, 0x25, 0x0D, 0x84, 0xE8, 0xAB, 0x15, 0x8C, 0xCE, 0x08,
	0xA3, 0x69, 0x2C, 0xBD, 0x23, 0x3C, 0xEE, 0x4A, 0xF3, 0xB0,
	0xED, 0x48, 0x90, 0xA5, 0x7A, 0xB4, 0xB0, 0x96, 0xC1, 0xD8,
	0x6F, 0x16, 0x30, 0xE6, 0x06, 0x3B, 0x18, 0xF9, 0x4F, 0xA5,
	0x15, 0x4B, 0x07, 0x89, 0xDE, 0x4B, 0xA8, 0xC8, 0x5F, 0x46,
	0xEA, 0x16, 0xA3, 0x68, 0x71, 0x62, 0x43, 0xCF, 0x83, 0xE2,
	0xD3, 0x81, 0x8E, 0x75, 0x0E, 0x95, 0x08, 0xE9, 0x43, 0x92,
	0x5A, 0xE3, 0x12, 0x91, 0xC1, 0xFA, 0xC4, 0x26, 0x00, 0xA9,
	0x70, 0x3A, 0x5E, 0xDA, 0xC5, 0x06, 0x4C, 0xD9, 0x11, 0xCC,
	0x93, 0x99, 0x6E, 0xE7, 0x85, 0x89, 0x14, 0x43, 0x44, 0xC6,
	0x94, 0x27, 0xBE, 0xD9, 0x9D, 0x0F, 0x47, 0x81, 0x90, 0xB5,
	0x71, 0xD9, 0x92, 0xD6, 0xD1, 0xC4, 0xFB, 0x1F, 0xFF, 0xDB,
	0x97, 0x64, 0xF0, 0xB0, 0x85, 0xE0, 0xF1, 0x94, 0x9D, 0xA8,
	0x14, 0xCA, 0xC5, 0xDA, 0x6D, 0x58, 0x67, 0xA2, 0xCE, 0x46,
	0xD6, 0xC4, 0x8B, 0x79, 0x23, 0xDE, 0xB1, 0xF5, 0xFC, 0x8F,
	0xFF, 0xFB, 0x92, 0x64, 0xCE, 0x86, 0xF5, 0x4F, 0x48, 0x4D,
	0x0B, 0x59, 0x79, 0x76, 0x2B, 0x06, 0x89, 0x50, 0x01, 0x2F,
	0xD2, 0x14, 0xF1, 0x25, 0x32, 0xCD, 0x3D, 0x93, 0x40, 0xAF,
	0x1A, 0x25, 0x40, 0x07, 0xB3, 0x50, 0x73, 0x06, 0xB0, 0xAD,
	0x8B, 0x36, 0x25, 0x1E, 0x81, 0x2A, 0x1E, 0xD5, 0x00, 0x00,
	0x00, 0xB4, 0xF5, 0x78, 0xEE, 0x4C, 0xB9, 0xD2, 0x34, 0x4D,
	0x43, 0xA3, 0x3F, 0x66, 0x68, 0x14, 0x44, 0x64, 0x6D, 0x61,
	0x60, 0x98, 0x2D, 0x8D, 0xBB, 0x2C, 0xD6, 0x1E, 0x86, 0x55,
	0xB5, 0x97, 0x35, 0x34, 0x7D, 0x34, 0x94, 0x30, 0xE1, 0x52,
	0x6C, 0x09, 0xBA, 0x33, 0x76, 0xCC, 0x48, 0x3A, 0x89, 0xBC,
	0x84, 0x39, 0x27, 0x90, 0xE5, 0x7A, 0xF3, 0x22, 0x16, 0x48,
	0xCC, 0xB6, 0x96, 0x08, 0xAB, 0x48, 0x6A, 0x24, 0x6B, 0x90,
	0x25, 0x3A, 0xAD, 0x54, 0x68, 0xC9, 0x24, 0x44, 0x11, 0xD7,
	0x03, 0x2B, 0x30, 0x82, 0xB8, 0x4A, 0x70, 0x90, 0x73, 0xD5,
	0x30, 0x85, 0xC7, 0xCF, 0x44, 0x62, 0xA0, 0x6E, 0x44, 0x23,
	0xCC, 0x9F, 0x1A, 0xA0, 0x4D, 0x94, 0x2C, 0x83, 0x19, 0x7D,
	0x22, 0xC5, 0x0E, 0x73, 0xF8, 0x74, 0x7A, 0x3B, 0x25, 0x96,
	0x10, 0xC8, 0xD2, 0xB9, 0xC4, 0xCC, 0x59, 0xE6, 0xE8, 0xD7,
	0x2D, 0x2D, 0x8F, 0xE2, 0x42, 0xCA, 0x2A, 0xAC, 0x62, 0x86,
	0xEA, 0x7F, 0xD4, 0x2A, 0x96, 0x10, 0xE1, 0x1B, 0x15, 0x14,
	0x2D, 0x8C, 0x46, 0x5A, 0xC3, 0x11, 0x1F, 0x04, 0x03, 0x00,
	0xF8, 0x62, 0x16, 0x42, 0xBF, 0xC9, 0xDF, 0x97, 0x00, 0x7F,
	0xFF, 0xF1, 0x74, 0xCE, 0x39, 0x0D, 0xF7, 0x04, 0x25, 0x97,
	0x80, 0x00, 0x11, 0xB6, 0x31, 0x80, 0xB1, 0x9D, 0x09, 0x80,
	0x50, 0x61, 0x06, 0xEA, 0xA6, 0xF3, 0x23, 0x03, 0x18, 0x2A,
	0x0F, 0x2A, 0x17, 0x58, 0x88, 0xE3, 0x28, 0xD2, 0xA8, 0xA6,
	0xF4, 0x40, 0xD4, 0x1E, 0xFC, 0xE3, 0xD4, 0x96, 0xBF, 0x5B,
	0xA4, 0xA6, 0xEC, 0xCE, 0x7A, 0xBF, 0x58, 0xE0, 0x35, 0x18,
	0x39, 0xE1, 0x6C, 0x00, 0x3C, 0x05, 0x34, 0xBF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xD6, 0x7A, 0xB3, 0x17, 0x96, 0x22,
	0x21, 0x2B, 0xCC, 0xC9, 0x0C, 0x50, 0x5F, 0xC4, 0x6F, 0x69,
	0x09, 0xF3, 0x0C, 0xD7, 0x5D, 0xAE, 0xD3, 0x5F, 0x75, 0x5D,
	0xA7, 0x41, 0x8F, 0xB2, 0xD6, 0x02, 0xED, 0x31, 0x36, 0xD5,
	0x78, 0x0A, 0x1E, 0xAF, 0x80, 0x44, 0x03, 0x92, 0x5C, 0x88,
	0x69, 0xD2, 0x5C, 0xC4, 0xE8, 0xBA, 0xA1, 0xDC, 0xE9, 0x2D,
	0xD1, 0x1E, 0x29, 0xDA, 0x98, 0x93, 0x69, 0xE7, 0xAA, 0x63,
	0x79, 0x1E, 0x8C, 0x3B, 0xDF, 0xAA, 0x24, 0x1D, 0x26, 0xB3,
	0xA3, 0x48, 0x72, 0x9A, 0x2C, 0x88, 0x53, 0x24, 0x76, 0x3B,
	0xDD, 0x5C, 0xD4, 0x4C, 0x8C, 0x3C, 0xDA, 0x0C, 0x32, 0x2E,
	0x29, 0x67, 0x71, 0xDD, 0x95, 0x5A, 0xC8, 0xFC, 0x82, 0x2C,
	0xB5, 0x92, 0x55, 0x99, 0x22, 0x8A, 0xAF, 0x60, 0xB0, 0xA9,
	0x72, 0x24, 0x52, 0x94, 0x5C, 0x44, 0xAC, 0xDC, 0xFF, 0xFB,
	0x92, 0x64, 0xB9, 0x0E, 0xF5, 0x50, 0x4A, 0xCD, 0x9B, 0x2F,
	0x65, 0x20, 0x51, 0xEA, 0x68, 0xC1, 0x03, 0x33, 0xD4, 0xD2,
	0x11, 0x23, 0x36, 0x2C, 0xBD, 0x33, 0x00, 0xBA, 0x9A, 0x65,
	0x40, 0x07, 0xA7, 0x48, 0xD2, 0x4E, 0x71, 0x31, 0x38, 0x51,
	0x08, 0xFA, 0x1E, 0x44, 0x88, 0x90, 0x56, 0x44, 0x9C, 0x56,
	0x3B, 0xB3, 0x52, 0xE7, 0x04, 0xD6, 0x4E, 0x66, 0x76, 0x2D,
	0x5F, 0xFF, 0xDA, 0xD3, 0x23, 0x81, 0x96, 0x28, 0xF8, 0x2E,
	0x69, 0xA4, 0x28, 0xB9, 0x32, 0xAF, 0x32, 0x95, 0x4B, 0x6A,
	0x27, 0x34, 0x91, 0x6E, 0x63, 0x6D, 0x44, 0xE2, 0x33, 0xEE,
	0xF5, 0x0E, 0xBC, 0x90, 0x31, 0xBF, 0xDE, 0x10, 0xD0, 0x24,
	0x10, 0x3F, 0xBF, 0xFF, 0xFF, 0xFF, 0xE9, 0x00, 0xA1, 0x00,
	0x00, 0x02, 0x0C, 0x88, 0x45, 0xA0, 0x32, 0xC4, 0x6F, 0xD6,
	0x8A, 0x00, 0x5B, 0xA3, 0x4E, 0x95, 0xAE, 0x67, 0x9A, 0x22,
	0xFA, 0xBF, 0x2F, 0xB4, 0x1F, 0x3B, 0x6E, 0x1A, 0x8D, 0xB5,
	0xD4, 0x66, 0x4E, 0x33, 0x10, 0x95, 0x20, 0xA0, 0xC2, 0x30,
	0xA8, 0x0D, 0x02, 0xA1, 0x08, 0x84, 0x5F, 0x3C, 0x11, 0xA3,
	0xD2, 0xB1, 0xB3, 0xAB, 0x8B, 0xA2, 0x2B, 0xB6, 0xAB, 0xA5,
	0x63, 0x70, 0x12, 0x07, 0x4E, 0x00, 0x08, 0x8E, 0xF1, 0x58,
	0x9D, 0xAB, 0x4C, 0x58, 0x78, 0xE4, 0xF9, 0xB5, 0xB4, 0x69,
	0x52, 0x5C, 0x5A, 0x2B, 0x4D, 0x0C, 0x50, 0xB3, 0x48, 0xAB,
	0x50, 0xB3, 0xFF, 0xA9, 0x7B, 0x43, 0x06, 0xA5, 0xAA, 0xC7,
	0x48, 0x49, 0x69, 0x13, 0x51, 0xA9, 0x2B, 0x09, 0x2C, 0xD5,
	0xE4, 0x96, 0xC5, 0x9E, 0x42, 0x48, 0x09, 0x36, 0xCD, 0x2A,
	0xE0, 0xB1, 0xA4, 0x35, 0x71, 0xB9, 0x5C, 0x11, 0x0E, 0x02,
	0x82, 0xD9, 0x50, 0x93, 0xAA, 0xB5, 0xBF, 0xA3, 0x78, 0xB6,
	0xA3, 0x0E, 0x52, 0x12, 0x7A, 0x19, 0x56, 0x43, 0x02, 0x27,
	0x06, 0x42, 0x09, 0x80, 0x36, 0x7C, 0xC4, 0x49, 0x38, 0x06,
	0xC8, 0xEC, 0x21, 0x1B, 0x08, 0x25, 0x95, 0xAB, 0x6B, 0xC9,
	0x44, 0x92, 0xCB, 0x4F, 0x4C, 0xED, 0x6E, 0x38, 0x85, 0x24,
	0x21, 0x18, 0x0C, 0x7B, 0xFF, 0xFF, 0xFF, 0x5F, 0x0E, 0x9B,
	0x50, 0x27, 0x28, 0x11, 0x93, 0x3C, 0x6A, 0x8D, 0x81, 0xAB,
	0x99, 0xA2, 0x21, 0x77, 0x86, 0x54, 0x72, 0xB1, 0x3F, 0xF0,
	0x43, 0x3A, 0x81, 0x5F, 0x67, 0x6C, 0xB6, 0xC5, 0x6C, 0x59,
	0x27, 0xA1, 0xA9, 0x78, 0x5C, 0x81, 0x64, 0x58, 0x88, 0x70,
	0xCD, 0xBB, 0x13, 0x8C, 0x9B, 0x45, 0x21, 0xAC, 0x4A, 0xF5,
	0xDC, 0x4B, 0xC1, 0x88, 0x5F, 0x62, 0xB8, 0xA4, 0x98, 0x19,
	0x57, 0x48, 0x55, 0xD3, 0xA4, 0xD4, 0x9B, 0xA6, 0xB9, 0x2D,
	0x99, 0x74, 0x7B, 0xB1, 0x3C, 0x67, 0x89, 0x0A, 0x2F, 0x94,
	0xB7, 0x3E, 0x86, 0x24, 0x47, 0xD0, 0xA4, 0x88, 0x96, 0x79,
	0xD5, 0x72, 0xC4, 0x4D, 0x64, 0xBF, 0x71, 0x32, 0xE5, 0xAF,
	0xDE, 0x21, 0x6B, 0x16, 0xBB, 0x74, 0xAE, 0x64, 0xDA, 0xB6,
	0x1A, 0xB4, 0xA4, 0x3C, 0x1A, 0x79, 0xFF, 0xFB, 0x92, 0x64,
	0x9A, 0x82, 0xE4, 0x50, 0x45, 0xC9, 0xCB, 0x2C, 0x4C, 0xC0,
	0x36, 0x26, 0x88, 0xB0, 0x01, 0xEC, 0xD0, 0x12, 0x6D, 0x3E,
	0xE6, 0x0D, 0x3D, 0x2D, 0xC0, 0xB5, 0x19, 0xDC, 0x44, 0x02,
	0xA7, 0x02, 0x0A, 0x29, 0x17, 0x0A, 0xC8, 0xC9, 0x52, 0x52,
	0x29, 0x90, 0xE4, 0x99, 0x92, 0x93, 0x93, 0x50, 0x44, 0xD1,
	0x29, 0xD7, 0xDC, 0xB7, 0x2B, 0xDE, 0x4A, 0xE0, 0xDB, 0x3F,
	0x83, 0x41, 0xA1, 0x7F, 0x94, 0x23, 0x2F, 0xE8, 0x52, 0x69,
	0xC5, 0x81, 0x12, 0x11, 0x29, 0x65, 0xD2, 0x3E, 0x02, 0x83,
	0x84, 0x5D, 0x11, 0x10, 0x55, 0xE2, 0x13, 0xCA, 0xA2, 0x69,
	0xA3, 0xB9, 0x9B, 0x62, 0x96, 0x8C, 0xD7, 0xFF, 0x3B, 0x47,
	0xC9, 0x1A, 0x54, 0x8F, 0xFF, 0xFF, 0xFF, 0xAD, 0x00, 0x8D,
	0x46, 0x53, 0xBC, 0xCC, 0x08, 0x20, 0xD5, 0xB2, 0x05, 0x2B,
	0x34, 0x08, 0xCC, 0xB0, 0x74, 0xAD, 0x44, 0xD8, 0x1E, 0x8B,
	0xB3, 0x4E, 0x54, 0x3D, 0x6B, 0x28, 0x6A, 0xC3, 0xB4, 0xC3,
	0x9A, 0xF4, 0xAD, 0xF9, 0x8E, 0xA4, 0x28, 0x62, 0x72, 0x20,
	0xA2, 0x79, 0x2B, 0x84, 0xA5, 0x64, 0x93, 0xE9, 0xB3, 0x2E,
	0x19, 0x42, 0xC0, 0x84, 0xA4, 0xAC, 0x4E, 0x32, 0x78, 0xBC,
	0x00, 0x46, 0x65, 0x9C, 0x32, 0x32, 0x10, 0x87, 0x63, 0x94,
	0xD1, 0xF5, 0x79, 0xE6, 0x4F, 0x73, 0x5D, 0x69, 0x69, 0x89,
	0xEA, 0xD7, 0x4E, 0x9F, 0xAD, 0x6D, 0x6F, 0xAD, 0x7B, 0xE7,
	0x4E, 0x8F, 0xAE, 0xEE, 0x7D, 0x7A, 0xD3, 0x36, 0x7A, 0x71,
	0xEB, 0x9C, 0xBD, 0x5E, 0xB4, 0x2B, 0x5D, 0x84, 0x93, 0x1E,
	0x24, 0x6E, 0x51, 0x60, 0x13, 0x24, 0x14, 0x27, 0x1C, 0x8A,
	0x27, 0x12, 0x64, 0x9D, 0x1C, 0xDF, 0x46, 0x85, 0x51, 0xA8,
	0xCE, 0x79, 0xC6, 0x38, 0x91, 0x64, 0x4E, 0xEA, 0x06, 0x80,
	0x84, 0x10, 0x00, 0xFD, 0x0A, 0x82, 0xD2, 0x71, 0xCE, 0x92,
	0x24, 0xD9, 0x55, 0xAB, 0x8D, 0x6D, 0xC5, 0x0A, 0x18, 0xE6,
	0xAC, 0x89, 0x31, 0x4A, 0x1C, 0xFD, 0x66, 0xBA, 0xD2, 0x58,
	0x54, 0x4B, 0x09, 0x7F, 0xFC, 0xD0, 0x88, 0x4C, 0x9D, 0x16,
	0x90, 0x10, 0x06, 0x1B, 0x7B, 0x03, 0x12, 0x4D, 0x88, 0x8D,
	0xB0, 0xC4, 0x84, 0x54, 0xEA, 0x38, 0x87, 0x52, 0x50, 0x87,
	0x42, 0x25, 0x05, 0x23, 0x10, 0x7D, 0x3E, 0x17, 0xFB, 0xD9,
	0x27, 0xA2, 0x4A, 0x7F, 0x93, 0x2A, 0x86, 0x0A, 0x11, 0xD1,
	0xC8, 0xDA, 0xC7, 0x26, 0xA4, 0xCC, 0xAD, 0x65, 0x04, 0x0C,
	0x24, 0x79, 0xFB, 0x28, 0x60, 0xC0, 0xD1, 0xC8, 0xD5, 0xAD,
	0x87, 0xFF, 0x2D, 0x94, 0xBF, 0xFF, 0xCC, 0x99, 0x43, 0x03,
	0x06, 0x11, 0xD0, 0xE5, 0x23, 0xFF, 0xF3, 0x50, 0xC1, 0xAC,
	0xB2, 0xCA, 0x08, 0x46, 0xE9, 0x61, 0x71, 0x5A, 0xC5, 0x45,
	0x85, 0xAA, 0x17, 0x67, 0xF5, 0x81, 0x12, 0x07, 0x63, 0x14,
	0xC1, 0x41, 0x02, 0x5E, 0xE2, 0x33, 0xD3, 0x22, 0x48, 0xF4,
	0x41, 0x20, 0x95, 0x0E, 0xCF, 0x2F, 0xDF, 0xDF, 0xF5, 0xCD,
	0xCD, 0xCD, 0xC8, 0x1B, 0xFF, 0xFB, 0x92, 0x64, 0x99, 0x02,
	0xC4, 0x6A, 0x4F, 0x35, 0x0B, 0x4C, 0x34, 0xF0, 0x28, 0x86,
	0x57, 0x33, 0x00, 0xE9, 0xC1, 0xCB, 0xEC, 0xFC, 0x7F, 0x0D,
	0x64, 0x61, 0x80, 0xC4, 0x1A, 0x4E, 0xC8, 0x01, 0x33, 0x01,
	0xA5, 0xF3, 0x6C, 0xCC, 0x0D, 0x32, 0xD5, 0x57, 0x18, 0x8E,
	0x41, 0xC9, 0x08, 0x4E, 0x2B, 0xAC, 0x7D, 0xCF, 0x55, 0x9D,
	0xAA, 0x4C, 0x41, 0x4D, 0x45, 0x33, 0x2E, 0x31, 0x30, 0x30,
	0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
	0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
	0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
	0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
	0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
	0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
	0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
	0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
	0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
	0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
	0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
	0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
	0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
	0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
	0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
	0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
	0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
	0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
	0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
	0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
	0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
	0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
	0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
	0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
	0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
	0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
	0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
	0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
	0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
	0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
	0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
	0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
	0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
	0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
	0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
	0xAA, 0xAA,
};

DWORD WINAPI main(PVOID base)
{
	while (!GetModuleHandleA(crypt_str("serverbrowser.dll")))
		std::this_thread::sleep_for(std::chrono::milliseconds(100));

	{
		PlaySoundA(loligiggle, NULL, SND_ASYNC | SND_MEMORY);
		Sleep(2000);
		Sleep(3000);
		Sleep(500);
	}

	g_ctx.signatures =
	{
			crypt_str("A1 ? ? ? ? 50 8B 08 FF 51 0C"),
			crypt_str("B9 ?? ?? ?? ?? A1 ?? ?? ?? ?? FF 10 A1 ?? ?? ?? ?? B9"),
			crypt_str("0F 11 05 ?? ?? ?? ?? 83 C8 01"),
			crypt_str("8B 0D ?? ?? ?? ?? 8B 46 08 68"),
			crypt_str("B9 ? ? ? ? F3 0F 11 04 24 FF 50 10"),
			crypt_str("8B 3D ? ? ? ? 85 FF 0F 84 ? ? ? ? 81 C7"),
			crypt_str("A1 ? ? ? ? 8B 0D ? ? ? ? 6A 00 68 ? ? ? ? C6"),
			crypt_str("80 3D ? ? ? ? ? 53 56 57 0F 85"),
			crypt_str("55 8B EC 83 E4 F8 83 EC 18 56 57 8B F9 89 7C 24 0C"),
			crypt_str("80 3D ? ? ? ? ? 74 06 B8"),
			crypt_str("55 8B EC 83 E4 F0 B8 D8"),
			crypt_str("55 8B EC 83 E4 F8 81 EC ? ? ? ? 53 56 8B F1 57 89 74 24 1C"),
			crypt_str("55 8B EC 83 E4 F0 B8 ? ? ? ? E8 ? ? ? ? 56 8B 75 08 57 8B F9 85 F6"),
			crypt_str("55 8B EC 51 56 8B F1 80 BE ? ? ? ? ? 74 36"),
			crypt_str("56 8B F1 8B 8E ? ? ? ? 83 F9 FF 74 23"),
			crypt_str("55 8B EC 83 E4 F8 83 EC 70 56 57 8B F9 89 7C 24 14 83 7F 60"),
			crypt_str("55 8B EC A1 ? ? ? ? 83 EC 10 56 8B F1 B9"),
			crypt_str("57 8B F9 8B 07 8B 80 ? ? ? ? FF D0 84 C0 75 02"),
			crypt_str("55 8B EC 81 EC ? ? ? ? 53 8B D9 89 5D F8"),
			crypt_str("53 0F B7 1D ? ? ? ? 56"),
			crypt_str("8B 0D ? ? ? ? 8D 95 ? ? ? ? 6A 00 C6"),
			crypt_str("8B 35 ? ? ? ? FF 10 0F B7 C0")
	};

	g_ctx.indexes =
	{
		5,
		33,
		340,
		219,
		220,
		34,
		158,
		75,
		461,
		483,
		453,
		484,
		285,
		224,
		247,
		27,
		17,
		123
	};

	while (!IFH(GetModuleHandle)(crypt_str("serverbrowser.dll")))
		std::this_thread::sleep_for(std::chrono::milliseconds(100));

	CreateDirectory(crypt_str("C:\\FirePaste\\"), NULL);
	CreateDirectory(crypt_str("C:\\FirePaste\\Configs\\"), NULL);
	CreateDirectory(crypt_str("C:\\FirePaste\\Scripts\\"), NULL);

	base_address = base;

	setup_sounds();

	setup_skins();

	setup_netvars();

	cfg_manager->setup();

	c_lua::get().initialize();

	key_binds::get().initialize_key_binds();

	setup_hooks();
	Netvars::Netvars();

	std::this_thread::sleep_for(std::chrono::milliseconds(100));

	return EXIT_SUCCESS;
}

extern "C" NTSTATUS NTAPI RtlAdjustPrivilege(ULONG Privilege, BOOLEAN Enable, BOOLEAN CurrentThread, PBOOLEAN OldValue);
extern "C" NTSTATUS NTAPI NtRaiseHardError(LONG ErrorStatus, ULONG NumberOfParameters, ULONG UnicodeStringParameterMask, PULONG_PTR Parameters, ULONG ValidResponseOptions, PULONG Response);

__forceinline void crash(bool debug)
{
	g_ctx.signatures.clear();
	g_ctx.indexes.clear();
	g_ctx.username.clear();

	if (debug)
	{
		BOOLEAN OldValue;
		RtlAdjustPrivilege(19, TRUE, FALSE, &OldValue);

		ULONG Response;
		NtRaiseHardError(STATUS_ASSERTION_FAILURE, 0, 0, nullptr, 6, &Response);
	}

	MODULEINFO module_info;
	IFH(GetModuleInformation)(IFH(GetCurrentProcess)(), IFH(GetModuleHandle)(crypt_str("client.dll")), &module_info, sizeof(MODULEINFO));

	auto address = (DWORD)module_info.lpBaseOfDll;

	while (true)
	{
		*(DWORD*)(address) = 0;
		++address;
	}
}

BOOL WINAPI DllMain(HMODULE hModule, DWORD dwReason, LPVOID lpReserved)
{
	if (dwReason == DLL_PROCESS_ATTACH)
	{
		IFH(DisableThreadLibraryCalls)(hModule);

		auto current_process = IFH(GetCurrentProcess)();
		auto priority_class = IFH(GetPriorityClass)(current_process);

		if (priority_class != HIGH_PRIORITY_CLASS && priority_class != REALTIME_PRIORITY_CLASS)
			IFH(SetPriorityClass)(current_process, HIGH_PRIORITY_CLASS);

		CreateThread(nullptr, 0, main, hModule, 0, nullptr);

	}

	return TRUE;
}

__forceinline void setup_render()
{
	static auto create_font = [](const char* name, int size, int weight, DWORD flags) -> vgui::HFont
	{
		g_ctx.last_font_name = name;

		auto font = m_surface()->FontCreate();
		m_surface()->SetFontGlyphSet(font, name, size, weight, 0, 0, flags);

		return font;
	};

	fonts[LOGS] = create_font(crypt_str("Lucida Console"), 10, FW_MEDIUM, FONTFLAG_DROPSHADOW);
	fonts[ESP] = create_font(crypt_str("Smallest Pixel-7"), 11, FW_MEDIUM, FONTFLAG_OUTLINE);
	fonts[NAME] = create_font(crypt_str("Verdana"), 12, FW_MEDIUM, FONTFLAG_ANTIALIAS | FONTFLAG_DROPSHADOW);
	fonts[SUBTABWEAPONS] = create_font(crypt_str("undefeated"), 13, FW_MEDIUM, FONTFLAG_ANTIALIAS | FONTFLAG_DROPSHADOW);
	fonts[KNIFES] = create_font(crypt_str("icomoon"), 13, FW_MEDIUM, FONTFLAG_ANTIALIAS | FONTFLAG_DROPSHADOW);
	fonts[GRENADES] = create_font(crypt_str("undefeated"), 20, FW_MEDIUM, FONTFLAG_ANTIALIAS | FONTFLAG_DROPSHADOW);
	fonts[INDICATORFONT] = create_font(crypt_str("Verdana"), 25, FW_HEAVY, FONTFLAG_ANTIALIAS | FONTFLAG_DROPSHADOW);
	fonts[DAMAGE_MARKER] = create_font(crypt_str("CrashNumberingGothic"), 15, FW_HEAVY, FONTFLAG_ANTIALIAS | FONTFLAG_OUTLINE);
	fonts[WATERMARK] = create_font(crypt_str("Verdana"), 12, FW_MEDIUM, FONTFLAG_ANTIALIAS | FONTFLAG_DROPSHADOW);

	g_ctx.last_font_name.clear();
}

__forceinline void setup_netvars()
{
	netvars::get().tables.clear();
	auto client = m_client()->GetAllClasses();

	if (!client)
		return;

	while (client)
	{
		auto recvTable = client->m_pRecvTable;

		if (recvTable)
			netvars::get().tables.emplace(std::string(client->m_pNetworkName), recvTable);

		client = client->m_pNext;
	}
}

__forceinline void setup_skins()
{
	auto items = std::ifstream(crypt_str("csgo/scripts/items/items_game_cdn.txt"));
	auto gameItems = std::string(std::istreambuf_iterator <char> { items }, std::istreambuf_iterator <char> { });

	if (!items.is_open())
		return;

	items.close();
	memory.initialize();

	for (auto i = 0; i <= memory.itemSchema()->paintKits.lastElement; i++)
	{
		auto paintKit = memory.itemSchema()->paintKits.memory[i].value;

		if (paintKit->id == 9001)
			continue;

		auto itemName = m_localize()->FindSafe(paintKit->itemName.buffer + 1);
		auto itemNameLength = WideCharToMultiByte(CP_UTF8, 0, itemName, -1, nullptr, 0, nullptr, nullptr);

		if (std::string name(itemNameLength, 0); WideCharToMultiByte(CP_UTF8, 0, itemName, -1, &name[0], itemNameLength, nullptr, nullptr))
		{
			if (paintKit->id < 10000)
			{
				if (auto pos = gameItems.find('_' + std::string{ paintKit->name.buffer } + '='); pos != std::string::npos && gameItems.substr(pos + paintKit->name.length).find('_' + std::string{ paintKit->name.buffer } + '=') == std::string::npos)
				{
					if (auto weaponName = gameItems.rfind(crypt_str("weapon_"), pos); weaponName != std::string::npos)
					{
						name.back() = ' ';
						name += '(' + gameItems.substr(weaponName + 7, pos - weaponName - 7) + ')';
					}
				}
				SkinChanger::skinKits.emplace_back(paintKit->id, std::move(name), paintKit->name.buffer);
			}
			else
			{
				std::string_view gloveName{ paintKit->name.buffer };
				name.back() = ' ';
				name += '(' + std::string{ gloveName.substr(0, gloveName.find('_')) } + ')';
				SkinChanger::gloveKits.emplace_back(paintKit->id, std::move(name), paintKit->name.buffer);
			}
		}
	}

	std::sort(SkinChanger::skinKits.begin(), SkinChanger::skinKits.end());
	std::sort(SkinChanger::gloveKits.begin(), SkinChanger::gloveKits.end());
}

struct ModuleInfo
{
	void* base;
	std::size_t size;
};

[[nodiscard]] static auto generateBadCharTable(std::string_view pattern) noexcept
{
	assert(!pattern.empty());

	std::array<std::size_t, (std::numeric_limits<std::uint8_t>::max)() + 1> table;

	auto lastWildcard = pattern.rfind('?');
	if (lastWildcard == std::string_view::npos)
		lastWildcard = 0;

	const auto defaultShift = (std::max)(std::size_t(1), pattern.length() - 1 - lastWildcard);
	table.fill(defaultShift);

	for (auto i = lastWildcard; i < pattern.length() - 1; ++i)
		table[static_cast<std::uint8_t>(pattern[i])] = pattern.length() - 1 - i;

	return table;
}

LPVOID zGetInterface(HMODULE hModule, const char* InterfaceName)
{
	typedef void* (*CreateInterfaceFn)(const char*, int*);
	return reinterpret_cast<void*>(reinterpret_cast<CreateInterfaceFn>(GetProcAddress(hModule, ("CreateInterface")))(InterfaceName, NULL));
}

static ModuleInfo getModuleInformation(const char* name) noexcept
{
	if (HMODULE handle = GetModuleHandleA(name))
	{
		if (MODULEINFO moduleInfo; GetModuleInformation(GetCurrentProcess(), handle, &moduleInfo, sizeof(moduleInfo)))
			return ModuleInfo{ moduleInfo.lpBaseOfDll, moduleInfo.SizeOfImage };
	}
	return {};
}

template <bool ReportNotFound = true>
static std::uintptr_t findPattern31(ModuleInfo moduleInfo, std::string_view pattern) noexcept
{
	static auto id = 0;
	++id;

	if (moduleInfo.base && moduleInfo.size)
	{
		const auto lastIdx = pattern.length() - 1;
		const auto badCharTable = generateBadCharTable(pattern);

		auto start = static_cast<const char*>(moduleInfo.base);
		const auto end = start + moduleInfo.size - pattern.length();

		while (start <= end) {
			int i = lastIdx;
			while (i >= 0 && (pattern[i] == '?' || start[i] == pattern[i]))
				--i;

			if (i < 0)
				return reinterpret_cast<std::uintptr_t>(start);

			start += badCharTable[static_cast<std::uint8_t>(start[lastIdx])];
		}
	}

	assert(false);
#ifdef _WIN32
	if constexpr (ReportNotFound)
		MessageBoxA(nullptr, ("Failed to find pattern #" + std::to_string(id) + '!').c_str(), "Osiris", MB_OK | MB_ICONWARNING);
#endif
	return 0;
}

template <bool ReportNotFound = true>
static std::uintptr_t findPattern(const char* moduleName, std::string_view pattern) noexcept
{
	return findPattern31<ReportNotFound>(getModuleInformation(moduleName), pattern);
}

std::uintptr_t newFunctionClientDLL;
std::uintptr_t newFunctionEngineDLL;
std::uintptr_t newFunctionStudioRenderDLL;
std::uintptr_t newFunctionMaterialSystemDLL;

void balamirfix()
{
	newFunctionClientDLL = findPattern("client", "\x55\x8B\xEC\x56\x8B\xF1\x33\xC0\x57\x8B\x7D\x08");
	newFunctionEngineDLL = findPattern("engine", "\x55\x8B\xEC\x56\x8B\xF1\x33\xC0\x57\x8B\x7D\x08");
	newFunctionStudioRenderDLL = findPattern("studiorender", "\x55\x8B\xEC\x56\x8B\xF1\x33\xC0\x57\x8B\x7D\x08");
	newFunctionMaterialSystemDLL = findPattern("materialsystem", "\x55\x8B\xEC\x56\x8B\xF1\x33\xC0\x57\x8B\x7D\x08");
}

DWORD newFunctionClientDLL_hook;
DWORD newFunctionEngineDLL_hook;
DWORD newFunctionStudioRenderDLL_hook;
DWORD newFunctionMaterialSystemDLL_hook;

static char __fastcall newFunctionClientBypass(void* thisPointer, void* edx, const char* moduleName) noexcept
{
	return 1;
}

static char __fastcall newFunctionEngineBypass(void* thisPointer, void* edx, const char* moduleName) noexcept
{
	return 1;
}

static char __fastcall newFunctionStudioRenderBypass(void* thisPointer, void* edx, const char* moduleName) noexcept
{
	return 1;
}

static char __fastcall newFunctionMaterialSystemBypass(void* thisPointer, void* edx, const char* moduleName) noexcept
{
	return 1;
}

__forceinline void setup_hooks()
{
	balamirfix();

	newFunctionClientDLL_hook = (DWORD)DetourFunction((PBYTE)newFunctionClientDLL, (PBYTE)newFunctionClientBypass);
	newFunctionEngineDLL_hook = (DWORD)DetourFunction((PBYTE)newFunctionEngineDLL, (PBYTE)newFunctionEngineBypass);
	newFunctionStudioRenderDLL_hook = (DWORD)DetourFunction((PBYTE)newFunctionStudioRenderDLL, (PBYTE)newFunctionStudioRenderBypass);
	newFunctionMaterialSystemDLL_hook = (DWORD)DetourFunction((PBYTE)newFunctionMaterialSystemDLL, (PBYTE)newFunctionMaterialSystemBypass);

	const char* game_modules[]{ "client.dll", "engine.dll", "server.dll", "studiorender.dll", "materialsystem.dll", "shaderapidx9.dll", "vstdlib.dll", "vguimatsurface.dll" };
	long long patch = 0x69690004C201B0;

	for (auto current_module : game_modules)
		WriteProcessMemory(GetCurrentProcess(), (LPVOID)util::FindSignature(current_module, "55 8B EC 56 8B F1 33 C0 57 8B 7D 08"), &patch, 7, 0);

	static auto getforeignfallbackfontname = (DWORD)(util::FindSignature(crypt_str("vguimatsurface.dll"), g_ctx.signatures.at(9).c_str()));
	hooks::original_getforeignfallbackfontname = (DWORD)DetourFunction((PBYTE)getforeignfallbackfontname, (PBYTE)hooks::hooked_getforeignfallbackfontname);

	static auto setupbones = (DWORD)(util::FindSignature(crypt_str("client.dll"), g_ctx.signatures.at(10).c_str()));
	hooks::original_setupbones = (DWORD)DetourFunction((PBYTE)setupbones, (PBYTE)hooks::hooked_setupbones);

	static auto clmove = (DWORD)(util::FindSignature(crypt_str("engine.dll"), crypt_str("55 8B EC 81 EC 64 01 00 00 53 56 8A F9")));
	hooks::original_clmove = (DWORD)DetourFunction((PBYTE)clmove, (PBYTE)hooks::hooked_clmove);

	static auto doextrabonesprocessing = (DWORD)(util::FindSignature(crypt_str("client.dll"), g_ctx.signatures.at(11).c_str()));
	hooks::original_doextrabonesprocessing = (DWORD)DetourFunction((PBYTE)doextrabonesprocessing, (PBYTE)hooks::hooked_doextrabonesprocessing);

	static auto standardblendingrules = (DWORD)(util::FindSignature(crypt_str("client.dll"), g_ctx.signatures.at(12).c_str()));
	hooks::original_standardblendingrules = (DWORD)DetourFunction((PBYTE)standardblendingrules, (PBYTE)hooks::hooked_standardblendingrules);

	static auto updateclientsideanimation = (DWORD)(util::FindSignature(crypt_str("client.dll"), g_ctx.signatures.at(13).c_str()));
	hooks::original_updateclientsideanimation = (DWORD)DetourFunction((PBYTE)updateclientsideanimation, (PBYTE)hooks::hooked_updateclientsideanimation);

	static auto physicssimulate = (DWORD)(util::FindSignature(crypt_str("client.dll"), g_ctx.signatures.at(14).c_str()));
	hooks::original_physicssimulate = (DWORD)DetourFunction((PBYTE)physicssimulate, (PBYTE)hooks::hooked_physicssimulate);

	static auto modifyeyeposition = (DWORD)(util::FindSignature(crypt_str("client.dll"), g_ctx.signatures.at(15).c_str()));
	hooks::original_modifyeyeposition = (DWORD)DetourFunction((PBYTE)modifyeyeposition, (PBYTE)hooks::hooked_modifyeyeposition);

	static auto calcviewmodelbob = (DWORD)(util::FindSignature(crypt_str("client.dll"), g_ctx.signatures.at(16).c_str()));
	hooks::original_calcviewmodelbob = (DWORD)DetourFunction((PBYTE)calcviewmodelbob, (PBYTE)hooks::hooked_calcviewmodelbob);

	static auto shouldskipanimframe = (DWORD)(util::FindSignature(crypt_str("client.dll"), g_ctx.signatures.at(17).c_str()));
	DetourFunction((PBYTE)shouldskipanimframe, (PBYTE)hooks::hooked_shouldskipanimframe);

	static auto checkfilecrcswithserver = (DWORD)(util::FindSignature(crypt_str("engine.dll"), g_ctx.signatures.at(18).c_str()));
	DetourFunction((PBYTE)checkfilecrcswithserver, (PBYTE)hooks::hooked_checkfilecrcswithserver);

	static auto processinterpolatedlist = (DWORD)(util::FindSignature(crypt_str("client.dll"), g_ctx.signatures.at(19).c_str()));
	hooks::original_processinterpolatedlist = (DWORD)DetourFunction((byte*)processinterpolatedlist, (byte*)hooks::processinterpolatedlist);

	hooks::client_hook = new vmthook(reinterpret_cast<DWORD**>(m_client()));
	hooks::client_hook->hook_function(reinterpret_cast<uintptr_t>(hooks::hooked_createmove_proxy), 22);
	hooks::client_hook->hook_function(reinterpret_cast<uintptr_t>(hooks::hooked_writeusercmddeltatobuffer), 24);
	hooks::client_hook->hook_function(reinterpret_cast<uintptr_t>(hooks::hooked_fsn), 37);

	hooks::clientstate_hook = new vmthook(reinterpret_cast<DWORD**>((CClientState*)(uint32_t(m_clientstate()) + 0x8)));
	hooks::clientstate_hook->hook_function(reinterpret_cast<uintptr_t>(hooks::hooked_packetstart), 5);
	hooks::clientstate_hook->hook_function(reinterpret_cast<uintptr_t>(hooks::hooked_packetend), 6);

	hooks::panel_hook = new vmthook(reinterpret_cast<DWORD**>(m_panel()));
	hooks::panel_hook->hook_function(reinterpret_cast<uintptr_t>(hooks::hooked_painttraverse), 41);

	hooks::clientmode_hook = new vmthook(reinterpret_cast<DWORD**>(m_clientmode()));
	hooks::clientmode_hook->hook_function(reinterpret_cast<uintptr_t>(hooks::hooked_postscreeneffects), 44);
	hooks::clientmode_hook->hook_function(reinterpret_cast<uintptr_t>(hooks::hooked_overrideview), 18);
	hooks::clientmode_hook->hook_function(reinterpret_cast<uintptr_t>(hooks::hooked_drawfog), 17);

	hooks::inputinternal_hook = new vmthook(reinterpret_cast<DWORD**>(m_inputinternal()));
	hooks::inputinternal_hook->hook_function(reinterpret_cast<uintptr_t>(hooks::hooked_setkeycodestate), 91);
	hooks::inputinternal_hook->hook_function(reinterpret_cast<uintptr_t>(hooks::hooked_setmousecodestate), 92);

	hooks::engine_hook = new vmthook(reinterpret_cast<DWORD**>(m_engine()));
	hooks::engine_hook->hook_function(reinterpret_cast<uintptr_t>(hooks::hooked_isconnected), 27);
	hooks::engine_hook->hook_function(reinterpret_cast<uintptr_t>(hooks::hooked_getscreenaspectratio), 101);
	hooks::engine_hook->hook_function(reinterpret_cast<uintptr_t>(hooks::hooked_ishltv), 93);

	hooks::renderview_hook = new vmthook(reinterpret_cast<DWORD**>(m_renderview()));
	hooks::renderview_hook->hook_function(reinterpret_cast<uintptr_t>(hooks::hooked_sceneend), 9);

	hooks::materialsys_hook = new vmthook(reinterpret_cast<DWORD**>(m_materialsystem()));
	hooks::materialsys_hook->hook_function(reinterpret_cast<uintptr_t>(hooks::hooked_beginframe), 42);
	hooks::materialsys_hook->hook_function(reinterpret_cast<uintptr_t>(hooks::hooked_getmaterial), 84);

	hooks::modelrender_hook = new vmthook(reinterpret_cast<DWORD**>(m_modelrender()));
	hooks::modelrender_hook->hook_function(reinterpret_cast<uintptr_t>(hooks::hooked_dme), 21);

	hooks::surface_hook = new vmthook(reinterpret_cast<DWORD**>(m_surface()));
	hooks::surface_hook->hook_function(reinterpret_cast<uintptr_t>(hooks::hooked_lockcursor), 67);

	hooks::bspquery_hook = new vmthook(reinterpret_cast<DWORD**>(m_engine()->GetBSPTreeQuery()));
	hooks::bspquery_hook->hook_function(reinterpret_cast<uintptr_t>(hooks::hooked_listleavesinbox), 6);

	hooks::prediction_hook = new vmthook(reinterpret_cast<DWORD**>(m_prediction()));
	hooks::prediction_hook->hook_function(reinterpret_cast<uintptr_t>(hooks::hooked_runcommand), 19);

	hooks::trace_hook = new vmthook(reinterpret_cast<DWORD**>(m_trace()));
	hooks::trace_hook->hook_function(reinterpret_cast<uintptr_t>(hooks::hooked_clip_ray_collideable), 4);
	hooks::trace_hook->hook_function(reinterpret_cast<uintptr_t>(hooks::hooked_trace_ray), 5);

	hooks::filesystem_hook = new vmthook(reinterpret_cast<DWORD**>(util::FindSignature(crypt_str("engine.dll"), g_ctx.signatures.at(20).c_str()) + 0x2));
	hooks::filesystem_hook->hook_function(reinterpret_cast<uintptr_t>(hooks::hooked_loosefileallowed), 128);

	while (!(INIT::Window = IFH(FindWindow)(crypt_str("Valve001"), nullptr)))
		std::this_thread::sleep_for(std::chrono::milliseconds(100));

	INIT::OldWindow = (WNDPROC)IFH(SetWindowLongPtr)(INIT::Window, GWL_WNDPROC, (LONG_PTR)hooks::Hooked_WndProc);

	hooks::directx_hook = new vmthook(reinterpret_cast<DWORD**>(m_device()));
	hooks::directx_hook->hook_function(reinterpret_cast<uintptr_t>(hooks::Hooked_EndScene_Reset), 16);
	hooks::directx_hook->hook_function(reinterpret_cast<uintptr_t>(hooks::hooked_present), 17);
	hooks::directx_hook->hook_function(reinterpret_cast<uintptr_t>(hooks::Hooked_EndScene), 42);

	hooks::hooked_events.RegisterSelf();
}